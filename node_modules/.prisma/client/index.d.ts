
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model BiophysicsTest
 * 
 */
export type BiophysicsTest = $Result.DefaultSelection<Prisma.$BiophysicsTestPayload>
/**
 * Model Range
 * 
 */
export type Range = $Result.DefaultSelection<Prisma.$RangePayload>
/**
 * Model Board
 * 
 */
export type Board = $Result.DefaultSelection<Prisma.$BoardPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Patients
 * const patients = await prisma.patient.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Patients
   * const patients = await prisma.patient.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.biophysicsTest`: Exposes CRUD operations for the **BiophysicsTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BiophysicsTests
    * const biophysicsTests = await prisma.biophysicsTest.findMany()
    * ```
    */
  get biophysicsTest(): Prisma.BiophysicsTestDelegate<ExtArgs>;

  /**
   * `prisma.range`: Exposes CRUD operations for the **Range** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ranges
    * const ranges = await prisma.range.findMany()
    * ```
    */
  get range(): Prisma.RangeDelegate<ExtArgs>;

  /**
   * `prisma.board`: Exposes CRUD operations for the **Board** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.board.findMany()
    * ```
    */
  get board(): Prisma.BoardDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Patient: 'Patient',
    BiophysicsTest: 'BiophysicsTest',
    Range: 'Range',
    Board: 'Board',
    User: 'User',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "patient" | "biophysicsTest" | "range" | "board" | "user" | "session"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      BiophysicsTest: {
        payload: Prisma.$BiophysicsTestPayload<ExtArgs>
        fields: Prisma.BiophysicsTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BiophysicsTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BiophysicsTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          findFirst: {
            args: Prisma.BiophysicsTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BiophysicsTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          findMany: {
            args: Prisma.BiophysicsTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>[]
          }
          create: {
            args: Prisma.BiophysicsTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          createMany: {
            args: Prisma.BiophysicsTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BiophysicsTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>[]
          }
          delete: {
            args: Prisma.BiophysicsTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          update: {
            args: Prisma.BiophysicsTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          deleteMany: {
            args: Prisma.BiophysicsTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BiophysicsTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BiophysicsTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiophysicsTestPayload>
          }
          aggregate: {
            args: Prisma.BiophysicsTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBiophysicsTest>
          }
          groupBy: {
            args: Prisma.BiophysicsTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiophysicsTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.BiophysicsTestCountArgs<ExtArgs>
            result: $Utils.Optional<BiophysicsTestCountAggregateOutputType> | number
          }
        }
      }
      Range: {
        payload: Prisma.$RangePayload<ExtArgs>
        fields: Prisma.RangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          findFirst: {
            args: Prisma.RangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          findMany: {
            args: Prisma.RangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>[]
          }
          create: {
            args: Prisma.RangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          createMany: {
            args: Prisma.RangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RangeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>[]
          }
          delete: {
            args: Prisma.RangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          update: {
            args: Prisma.RangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          deleteMany: {
            args: Prisma.RangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RangePayload>
          }
          aggregate: {
            args: Prisma.RangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRange>
          }
          groupBy: {
            args: Prisma.RangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RangeCountArgs<ExtArgs>
            result: $Utils.Optional<RangeCountAggregateOutputType> | number
          }
        }
      }
      Board: {
        payload: Prisma.$BoardPayload<ExtArgs>
        fields: Prisma.BoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findFirst: {
            args: Prisma.BoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findMany: {
            args: Prisma.BoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          create: {
            args: Prisma.BoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          createMany: {
            args: Prisma.BoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          delete: {
            args: Prisma.BoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          update: {
            args: Prisma.BoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          deleteMany: {
            args: Prisma.BoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          aggregate: {
            args: Prisma.BoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoard>
          }
          groupBy: {
            args: Prisma.BoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardCountArgs<ExtArgs>
            result: $Utils.Optional<BoardCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    testsBiofisicos: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testsBiofisicos?: boolean | PatientCountOutputTypeCountTestsBiofisicosArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTestsBiofisicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiophysicsTestWhereInput
  }


  /**
   * Count Type RangeCountOutputType
   */

  export type RangeCountOutputType = {
    boards: number
  }

  export type RangeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boards?: boolean | RangeCountOutputTypeCountBoardsArgs
  }

  // Custom InputTypes
  /**
   * RangeCountOutputType without action
   */
  export type RangeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RangeCountOutputType
     */
    select?: RangeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RangeCountOutputType without action
   */
  export type RangeCountOutputTypeCountBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    edadCronologica: number | null
  }

  export type PatientSumAggregateOutputType = {
    edadCronologica: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    foto: string | null
    nacionalidad: string | null
    identificacion: string | null
    fechaHistoria: Date | null
    apellidos: string | null
    nombres: string | null
    fechaNacimiento: Date | null
    edadCronologica: number | null
    genero: string | null
    lugarNacimiento: string | null
    telefono: string | null
    estadoCivil: string | null
    profesion: string | null
    paisResidencia: string | null
    estadoResidencia: string | null
    ciudad: string | null
    direccion: string | null
    observaciones: string | null
    email: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    foto: string | null
    nacionalidad: string | null
    identificacion: string | null
    fechaHistoria: Date | null
    apellidos: string | null
    nombres: string | null
    fechaNacimiento: Date | null
    edadCronologica: number | null
    genero: string | null
    lugarNacimiento: string | null
    telefono: string | null
    estadoCivil: string | null
    profesion: string | null
    paisResidencia: string | null
    estadoResidencia: string | null
    ciudad: string | null
    direccion: string | null
    observaciones: string | null
    email: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    foto: number
    nacionalidad: number
    identificacion: number
    fechaHistoria: number
    apellidos: number
    nombres: number
    fechaNacimiento: number
    edadCronologica: number
    genero: number
    lugarNacimiento: number
    telefono: number
    estadoCivil: number
    profesion: number
    paisResidencia: number
    estadoResidencia: number
    ciudad: number
    direccion: number
    observaciones: number
    email: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    edadCronologica?: true
  }

  export type PatientSumAggregateInputType = {
    edadCronologica?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    foto?: true
    nacionalidad?: true
    identificacion?: true
    fechaHistoria?: true
    apellidos?: true
    nombres?: true
    fechaNacimiento?: true
    edadCronologica?: true
    genero?: true
    lugarNacimiento?: true
    telefono?: true
    estadoCivil?: true
    profesion?: true
    paisResidencia?: true
    estadoResidencia?: true
    ciudad?: true
    direccion?: true
    observaciones?: true
    email?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    foto?: true
    nacionalidad?: true
    identificacion?: true
    fechaHistoria?: true
    apellidos?: true
    nombres?: true
    fechaNacimiento?: true
    edadCronologica?: true
    genero?: true
    lugarNacimiento?: true
    telefono?: true
    estadoCivil?: true
    profesion?: true
    paisResidencia?: true
    estadoResidencia?: true
    ciudad?: true
    direccion?: true
    observaciones?: true
    email?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    foto?: true
    nacionalidad?: true
    identificacion?: true
    fechaHistoria?: true
    apellidos?: true
    nombres?: true
    fechaNacimiento?: true
    edadCronologica?: true
    genero?: true
    lugarNacimiento?: true
    telefono?: true
    estadoCivil?: true
    profesion?: true
    paisResidencia?: true
    estadoResidencia?: true
    ciudad?: true
    direccion?: true
    observaciones?: true
    email?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    foto: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria: Date
    apellidos: string
    nombres: string
    fechaNacimiento: Date
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono: string | null
    estadoCivil: string | null
    profesion: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion: string | null
    observaciones: string | null
    email: string | null
    fechaCreacion: Date
    fechaActualizacion: Date
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foto?: boolean
    nacionalidad?: boolean
    identificacion?: boolean
    fechaHistoria?: boolean
    apellidos?: boolean
    nombres?: boolean
    fechaNacimiento?: boolean
    edadCronologica?: boolean
    genero?: boolean
    lugarNacimiento?: boolean
    telefono?: boolean
    estadoCivil?: boolean
    profesion?: boolean
    paisResidencia?: boolean
    estadoResidencia?: boolean
    ciudad?: boolean
    direccion?: boolean
    observaciones?: boolean
    email?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    testsBiofisicos?: boolean | Patient$testsBiofisicosArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foto?: boolean
    nacionalidad?: boolean
    identificacion?: boolean
    fechaHistoria?: boolean
    apellidos?: boolean
    nombres?: boolean
    fechaNacimiento?: boolean
    edadCronologica?: boolean
    genero?: boolean
    lugarNacimiento?: boolean
    telefono?: boolean
    estadoCivil?: boolean
    profesion?: boolean
    paisResidencia?: boolean
    estadoResidencia?: boolean
    ciudad?: boolean
    direccion?: boolean
    observaciones?: boolean
    email?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    foto?: boolean
    nacionalidad?: boolean
    identificacion?: boolean
    fechaHistoria?: boolean
    apellidos?: boolean
    nombres?: boolean
    fechaNacimiento?: boolean
    edadCronologica?: boolean
    genero?: boolean
    lugarNacimiento?: boolean
    telefono?: boolean
    estadoCivil?: boolean
    profesion?: boolean
    paisResidencia?: boolean
    estadoResidencia?: boolean
    ciudad?: boolean
    direccion?: boolean
    observaciones?: boolean
    email?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testsBiofisicos?: boolean | Patient$testsBiofisicosArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      testsBiofisicos: Prisma.$BiophysicsTestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      foto: string | null
      nacionalidad: string
      identificacion: string
      fechaHistoria: Date
      apellidos: string
      nombres: string
      fechaNacimiento: Date
      edadCronologica: number
      genero: string
      lugarNacimiento: string
      telefono: string | null
      estadoCivil: string | null
      profesion: string | null
      paisResidencia: string
      estadoResidencia: string
      ciudad: string
      direccion: string | null
      observaciones: string | null
      email: string | null
      fechaCreacion: Date
      fechaActualizacion: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    testsBiofisicos<T extends Patient$testsBiofisicosArgs<ExtArgs> = {}>(args?: Subset<T, Patient$testsBiofisicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly foto: FieldRef<"Patient", 'String'>
    readonly nacionalidad: FieldRef<"Patient", 'String'>
    readonly identificacion: FieldRef<"Patient", 'String'>
    readonly fechaHistoria: FieldRef<"Patient", 'DateTime'>
    readonly apellidos: FieldRef<"Patient", 'String'>
    readonly nombres: FieldRef<"Patient", 'String'>
    readonly fechaNacimiento: FieldRef<"Patient", 'DateTime'>
    readonly edadCronologica: FieldRef<"Patient", 'Int'>
    readonly genero: FieldRef<"Patient", 'String'>
    readonly lugarNacimiento: FieldRef<"Patient", 'String'>
    readonly telefono: FieldRef<"Patient", 'String'>
    readonly estadoCivil: FieldRef<"Patient", 'String'>
    readonly profesion: FieldRef<"Patient", 'String'>
    readonly paisResidencia: FieldRef<"Patient", 'String'>
    readonly estadoResidencia: FieldRef<"Patient", 'String'>
    readonly ciudad: FieldRef<"Patient", 'String'>
    readonly direccion: FieldRef<"Patient", 'String'>
    readonly observaciones: FieldRef<"Patient", 'String'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly fechaCreacion: FieldRef<"Patient", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }

  /**
   * Patient.testsBiofisicos
   */
  export type Patient$testsBiofisicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    where?: BiophysicsTestWhereInput
    orderBy?: BiophysicsTestOrderByWithRelationInput | BiophysicsTestOrderByWithRelationInput[]
    cursor?: BiophysicsTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BiophysicsTestScalarFieldEnum | BiophysicsTestScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model BiophysicsTest
   */

  export type AggregateBiophysicsTest = {
    _count: BiophysicsTestCountAggregateOutputType | null
    _avg: BiophysicsTestAvgAggregateOutputType | null
    _sum: BiophysicsTestSumAggregateOutputType | null
    _min: BiophysicsTestMinAggregateOutputType | null
    _max: BiophysicsTestMaxAggregateOutputType | null
  }

  export type BiophysicsTestAvgAggregateOutputType = {
    grasa: number | null
    grasaEdadCalculada: number | null
    imc: number | null
    imcEdadCalculada: number | null
    reflejosMed1: number | null
    reflejosMed2: number | null
    reflejosMed3: number | null
    reflejosPromedio: number | null
    reflejosEdadCalculada: number | null
    acomodacion: number | null
    acomodacionEdadCalculada: number | null
    balanceMed1: number | null
    balanceMed2: number | null
    balanceMed3: number | null
    balancePromedio: number | null
    balanceEdadCalculada: number | null
    hidratacion: number | null
    hidratacionEdadCalculada: number | null
    sistolica: number | null
    sistolicaEdadCalculada: number | null
    diastolica: number | null
    diastolicaEdadCalculada: number | null
    pulsoReposo: number | null
    pulsoReposoEdadCalculada: number | null
    edadCronologica: number | null
    edadBiofisica: number | null
    edadDiferencial: number | null
  }

  export type BiophysicsTestSumAggregateOutputType = {
    grasa: number | null
    grasaEdadCalculada: number | null
    imc: number | null
    imcEdadCalculada: number | null
    reflejosMed1: number | null
    reflejosMed2: number | null
    reflejosMed3: number | null
    reflejosPromedio: number | null
    reflejosEdadCalculada: number | null
    acomodacion: number | null
    acomodacionEdadCalculada: number | null
    balanceMed1: number | null
    balanceMed2: number | null
    balanceMed3: number | null
    balancePromedio: number | null
    balanceEdadCalculada: number | null
    hidratacion: number | null
    hidratacionEdadCalculada: number | null
    sistolica: number | null
    sistolicaEdadCalculada: number | null
    diastolica: number | null
    diastolicaEdadCalculada: number | null
    pulsoReposo: number | null
    pulsoReposoEdadCalculada: number | null
    edadCronologica: number | null
    edadBiofisica: number | null
    edadDiferencial: number | null
  }

  export type BiophysicsTestMinAggregateOutputType = {
    id: string | null
    pacienteId: string | null
    fecha: Date | null
    genero: string | null
    grasa: number | null
    grasaEdadCalculada: number | null
    imc: number | null
    imcEdadCalculada: number | null
    reflejosMed1: number | null
    reflejosMed2: number | null
    reflejosMed3: number | null
    reflejosPromedio: number | null
    reflejosEdadCalculada: number | null
    acomodacion: number | null
    acomodacionEdadCalculada: number | null
    balanceMed1: number | null
    balanceMed2: number | null
    balanceMed3: number | null
    balancePromedio: number | null
    balanceEdadCalculada: number | null
    hidratacion: number | null
    hidratacionEdadCalculada: number | null
    sistolica: number | null
    sistolicaEdadCalculada: number | null
    diastolica: number | null
    diastolicaEdadCalculada: number | null
    pulsoReposo: number | null
    pulsoReposoEdadCalculada: number | null
    edadCronologica: number | null
    edadBiofisica: number | null
    edadDiferencial: number | null
    evaluacion: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type BiophysicsTestMaxAggregateOutputType = {
    id: string | null
    pacienteId: string | null
    fecha: Date | null
    genero: string | null
    grasa: number | null
    grasaEdadCalculada: number | null
    imc: number | null
    imcEdadCalculada: number | null
    reflejosMed1: number | null
    reflejosMed2: number | null
    reflejosMed3: number | null
    reflejosPromedio: number | null
    reflejosEdadCalculada: number | null
    acomodacion: number | null
    acomodacionEdadCalculada: number | null
    balanceMed1: number | null
    balanceMed2: number | null
    balanceMed3: number | null
    balancePromedio: number | null
    balanceEdadCalculada: number | null
    hidratacion: number | null
    hidratacionEdadCalculada: number | null
    sistolica: number | null
    sistolicaEdadCalculada: number | null
    diastolica: number | null
    diastolicaEdadCalculada: number | null
    pulsoReposo: number | null
    pulsoReposoEdadCalculada: number | null
    edadCronologica: number | null
    edadBiofisica: number | null
    edadDiferencial: number | null
    evaluacion: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type BiophysicsTestCountAggregateOutputType = {
    id: number
    pacienteId: number
    fecha: number
    genero: number
    grasa: number
    grasaEdadCalculada: number
    imc: number
    imcEdadCalculada: number
    reflejosMed1: number
    reflejosMed2: number
    reflejosMed3: number
    reflejosPromedio: number
    reflejosEdadCalculada: number
    acomodacion: number
    acomodacionEdadCalculada: number
    balanceMed1: number
    balanceMed2: number
    balanceMed3: number
    balancePromedio: number
    balanceEdadCalculada: number
    hidratacion: number
    hidratacionEdadCalculada: number
    sistolica: number
    sistolicaEdadCalculada: number
    diastolica: number
    diastolicaEdadCalculada: number
    pulsoReposo: number
    pulsoReposoEdadCalculada: number
    edadCronologica: number
    edadBiofisica: number
    edadDiferencial: number
    evaluacion: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type BiophysicsTestAvgAggregateInputType = {
    grasa?: true
    grasaEdadCalculada?: true
    imc?: true
    imcEdadCalculada?: true
    reflejosMed1?: true
    reflejosMed2?: true
    reflejosMed3?: true
    reflejosPromedio?: true
    reflejosEdadCalculada?: true
    acomodacion?: true
    acomodacionEdadCalculada?: true
    balanceMed1?: true
    balanceMed2?: true
    balanceMed3?: true
    balancePromedio?: true
    balanceEdadCalculada?: true
    hidratacion?: true
    hidratacionEdadCalculada?: true
    sistolica?: true
    sistolicaEdadCalculada?: true
    diastolica?: true
    diastolicaEdadCalculada?: true
    pulsoReposo?: true
    pulsoReposoEdadCalculada?: true
    edadCronologica?: true
    edadBiofisica?: true
    edadDiferencial?: true
  }

  export type BiophysicsTestSumAggregateInputType = {
    grasa?: true
    grasaEdadCalculada?: true
    imc?: true
    imcEdadCalculada?: true
    reflejosMed1?: true
    reflejosMed2?: true
    reflejosMed3?: true
    reflejosPromedio?: true
    reflejosEdadCalculada?: true
    acomodacion?: true
    acomodacionEdadCalculada?: true
    balanceMed1?: true
    balanceMed2?: true
    balanceMed3?: true
    balancePromedio?: true
    balanceEdadCalculada?: true
    hidratacion?: true
    hidratacionEdadCalculada?: true
    sistolica?: true
    sistolicaEdadCalculada?: true
    diastolica?: true
    diastolicaEdadCalculada?: true
    pulsoReposo?: true
    pulsoReposoEdadCalculada?: true
    edadCronologica?: true
    edadBiofisica?: true
    edadDiferencial?: true
  }

  export type BiophysicsTestMinAggregateInputType = {
    id?: true
    pacienteId?: true
    fecha?: true
    genero?: true
    grasa?: true
    grasaEdadCalculada?: true
    imc?: true
    imcEdadCalculada?: true
    reflejosMed1?: true
    reflejosMed2?: true
    reflejosMed3?: true
    reflejosPromedio?: true
    reflejosEdadCalculada?: true
    acomodacion?: true
    acomodacionEdadCalculada?: true
    balanceMed1?: true
    balanceMed2?: true
    balanceMed3?: true
    balancePromedio?: true
    balanceEdadCalculada?: true
    hidratacion?: true
    hidratacionEdadCalculada?: true
    sistolica?: true
    sistolicaEdadCalculada?: true
    diastolica?: true
    diastolicaEdadCalculada?: true
    pulsoReposo?: true
    pulsoReposoEdadCalculada?: true
    edadCronologica?: true
    edadBiofisica?: true
    edadDiferencial?: true
    evaluacion?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type BiophysicsTestMaxAggregateInputType = {
    id?: true
    pacienteId?: true
    fecha?: true
    genero?: true
    grasa?: true
    grasaEdadCalculada?: true
    imc?: true
    imcEdadCalculada?: true
    reflejosMed1?: true
    reflejosMed2?: true
    reflejosMed3?: true
    reflejosPromedio?: true
    reflejosEdadCalculada?: true
    acomodacion?: true
    acomodacionEdadCalculada?: true
    balanceMed1?: true
    balanceMed2?: true
    balanceMed3?: true
    balancePromedio?: true
    balanceEdadCalculada?: true
    hidratacion?: true
    hidratacionEdadCalculada?: true
    sistolica?: true
    sistolicaEdadCalculada?: true
    diastolica?: true
    diastolicaEdadCalculada?: true
    pulsoReposo?: true
    pulsoReposoEdadCalculada?: true
    edadCronologica?: true
    edadBiofisica?: true
    edadDiferencial?: true
    evaluacion?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type BiophysicsTestCountAggregateInputType = {
    id?: true
    pacienteId?: true
    fecha?: true
    genero?: true
    grasa?: true
    grasaEdadCalculada?: true
    imc?: true
    imcEdadCalculada?: true
    reflejosMed1?: true
    reflejosMed2?: true
    reflejosMed3?: true
    reflejosPromedio?: true
    reflejosEdadCalculada?: true
    acomodacion?: true
    acomodacionEdadCalculada?: true
    balanceMed1?: true
    balanceMed2?: true
    balanceMed3?: true
    balancePromedio?: true
    balanceEdadCalculada?: true
    hidratacion?: true
    hidratacionEdadCalculada?: true
    sistolica?: true
    sistolicaEdadCalculada?: true
    diastolica?: true
    diastolicaEdadCalculada?: true
    pulsoReposo?: true
    pulsoReposoEdadCalculada?: true
    edadCronologica?: true
    edadBiofisica?: true
    edadDiferencial?: true
    evaluacion?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type BiophysicsTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BiophysicsTest to aggregate.
     */
    where?: BiophysicsTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiophysicsTests to fetch.
     */
    orderBy?: BiophysicsTestOrderByWithRelationInput | BiophysicsTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BiophysicsTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiophysicsTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiophysicsTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BiophysicsTests
    **/
    _count?: true | BiophysicsTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BiophysicsTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BiophysicsTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiophysicsTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiophysicsTestMaxAggregateInputType
  }

  export type GetBiophysicsTestAggregateType<T extends BiophysicsTestAggregateArgs> = {
        [P in keyof T & keyof AggregateBiophysicsTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBiophysicsTest[P]>
      : GetScalarType<T[P], AggregateBiophysicsTest[P]>
  }




  export type BiophysicsTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiophysicsTestWhereInput
    orderBy?: BiophysicsTestOrderByWithAggregationInput | BiophysicsTestOrderByWithAggregationInput[]
    by: BiophysicsTestScalarFieldEnum[] | BiophysicsTestScalarFieldEnum
    having?: BiophysicsTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiophysicsTestCountAggregateInputType | true
    _avg?: BiophysicsTestAvgAggregateInputType
    _sum?: BiophysicsTestSumAggregateInputType
    _min?: BiophysicsTestMinAggregateInputType
    _max?: BiophysicsTestMaxAggregateInputType
  }

  export type BiophysicsTestGroupByOutputType = {
    id: string
    pacienteId: string
    fecha: Date
    genero: string
    grasa: number | null
    grasaEdadCalculada: number | null
    imc: number | null
    imcEdadCalculada: number | null
    reflejosMed1: number | null
    reflejosMed2: number | null
    reflejosMed3: number | null
    reflejosPromedio: number | null
    reflejosEdadCalculada: number | null
    acomodacion: number | null
    acomodacionEdadCalculada: number | null
    balanceMed1: number | null
    balanceMed2: number | null
    balanceMed3: number | null
    balancePromedio: number | null
    balanceEdadCalculada: number | null
    hidratacion: number | null
    hidratacionEdadCalculada: number | null
    sistolica: number | null
    sistolicaEdadCalculada: number | null
    diastolica: number | null
    diastolicaEdadCalculada: number | null
    pulsoReposo: number | null
    pulsoReposoEdadCalculada: number | null
    edadCronologica: number
    edadBiofisica: number | null
    edadDiferencial: number | null
    evaluacion: string | null
    fechaCreacion: Date
    fechaActualizacion: Date
    _count: BiophysicsTestCountAggregateOutputType | null
    _avg: BiophysicsTestAvgAggregateOutputType | null
    _sum: BiophysicsTestSumAggregateOutputType | null
    _min: BiophysicsTestMinAggregateOutputType | null
    _max: BiophysicsTestMaxAggregateOutputType | null
  }

  type GetBiophysicsTestGroupByPayload<T extends BiophysicsTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiophysicsTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiophysicsTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiophysicsTestGroupByOutputType[P]>
            : GetScalarType<T[P], BiophysicsTestGroupByOutputType[P]>
        }
      >
    >


  export type BiophysicsTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    fecha?: boolean
    genero?: boolean
    grasa?: boolean
    grasaEdadCalculada?: boolean
    imc?: boolean
    imcEdadCalculada?: boolean
    reflejosMed1?: boolean
    reflejosMed2?: boolean
    reflejosMed3?: boolean
    reflejosPromedio?: boolean
    reflejosEdadCalculada?: boolean
    acomodacion?: boolean
    acomodacionEdadCalculada?: boolean
    balanceMed1?: boolean
    balanceMed2?: boolean
    balanceMed3?: boolean
    balancePromedio?: boolean
    balanceEdadCalculada?: boolean
    hidratacion?: boolean
    hidratacionEdadCalculada?: boolean
    sistolica?: boolean
    sistolicaEdadCalculada?: boolean
    diastolica?: boolean
    diastolicaEdadCalculada?: boolean
    pulsoReposo?: boolean
    pulsoReposoEdadCalculada?: boolean
    edadCronologica?: boolean
    edadBiofisica?: boolean
    edadDiferencial?: boolean
    evaluacion?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    paciente?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biophysicsTest"]>

  export type BiophysicsTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    fecha?: boolean
    genero?: boolean
    grasa?: boolean
    grasaEdadCalculada?: boolean
    imc?: boolean
    imcEdadCalculada?: boolean
    reflejosMed1?: boolean
    reflejosMed2?: boolean
    reflejosMed3?: boolean
    reflejosPromedio?: boolean
    reflejosEdadCalculada?: boolean
    acomodacion?: boolean
    acomodacionEdadCalculada?: boolean
    balanceMed1?: boolean
    balanceMed2?: boolean
    balanceMed3?: boolean
    balancePromedio?: boolean
    balanceEdadCalculada?: boolean
    hidratacion?: boolean
    hidratacionEdadCalculada?: boolean
    sistolica?: boolean
    sistolicaEdadCalculada?: boolean
    diastolica?: boolean
    diastolicaEdadCalculada?: boolean
    pulsoReposo?: boolean
    pulsoReposoEdadCalculada?: boolean
    edadCronologica?: boolean
    edadBiofisica?: boolean
    edadDiferencial?: boolean
    evaluacion?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    paciente?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biophysicsTest"]>

  export type BiophysicsTestSelectScalar = {
    id?: boolean
    pacienteId?: boolean
    fecha?: boolean
    genero?: boolean
    grasa?: boolean
    grasaEdadCalculada?: boolean
    imc?: boolean
    imcEdadCalculada?: boolean
    reflejosMed1?: boolean
    reflejosMed2?: boolean
    reflejosMed3?: boolean
    reflejosPromedio?: boolean
    reflejosEdadCalculada?: boolean
    acomodacion?: boolean
    acomodacionEdadCalculada?: boolean
    balanceMed1?: boolean
    balanceMed2?: boolean
    balanceMed3?: boolean
    balancePromedio?: boolean
    balanceEdadCalculada?: boolean
    hidratacion?: boolean
    hidratacionEdadCalculada?: boolean
    sistolica?: boolean
    sistolicaEdadCalculada?: boolean
    diastolica?: boolean
    diastolicaEdadCalculada?: boolean
    pulsoReposo?: boolean
    pulsoReposoEdadCalculada?: boolean
    edadCronologica?: boolean
    edadBiofisica?: boolean
    edadDiferencial?: boolean
    evaluacion?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }

  export type BiophysicsTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type BiophysicsTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $BiophysicsTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BiophysicsTest"
    objects: {
      paciente: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pacienteId: string
      fecha: Date
      genero: string
      grasa: number | null
      grasaEdadCalculada: number | null
      imc: number | null
      imcEdadCalculada: number | null
      reflejosMed1: number | null
      reflejosMed2: number | null
      reflejosMed3: number | null
      reflejosPromedio: number | null
      reflejosEdadCalculada: number | null
      acomodacion: number | null
      acomodacionEdadCalculada: number | null
      balanceMed1: number | null
      balanceMed2: number | null
      balanceMed3: number | null
      balancePromedio: number | null
      balanceEdadCalculada: number | null
      hidratacion: number | null
      hidratacionEdadCalculada: number | null
      sistolica: number | null
      sistolicaEdadCalculada: number | null
      diastolica: number | null
      diastolicaEdadCalculada: number | null
      pulsoReposo: number | null
      pulsoReposoEdadCalculada: number | null
      edadCronologica: number
      edadBiofisica: number | null
      edadDiferencial: number | null
      evaluacion: string | null
      fechaCreacion: Date
      fechaActualizacion: Date
    }, ExtArgs["result"]["biophysicsTest"]>
    composites: {}
  }

  type BiophysicsTestGetPayload<S extends boolean | null | undefined | BiophysicsTestDefaultArgs> = $Result.GetResult<Prisma.$BiophysicsTestPayload, S>

  type BiophysicsTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BiophysicsTestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BiophysicsTestCountAggregateInputType | true
    }

  export interface BiophysicsTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BiophysicsTest'], meta: { name: 'BiophysicsTest' } }
    /**
     * Find zero or one BiophysicsTest that matches the filter.
     * @param {BiophysicsTestFindUniqueArgs} args - Arguments to find a BiophysicsTest
     * @example
     * // Get one BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BiophysicsTestFindUniqueArgs>(args: SelectSubset<T, BiophysicsTestFindUniqueArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BiophysicsTest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BiophysicsTestFindUniqueOrThrowArgs} args - Arguments to find a BiophysicsTest
     * @example
     * // Get one BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BiophysicsTestFindUniqueOrThrowArgs>(args: SelectSubset<T, BiophysicsTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BiophysicsTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestFindFirstArgs} args - Arguments to find a BiophysicsTest
     * @example
     * // Get one BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BiophysicsTestFindFirstArgs>(args?: SelectSubset<T, BiophysicsTestFindFirstArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BiophysicsTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestFindFirstOrThrowArgs} args - Arguments to find a BiophysicsTest
     * @example
     * // Get one BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BiophysicsTestFindFirstOrThrowArgs>(args?: SelectSubset<T, BiophysicsTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BiophysicsTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BiophysicsTests
     * const biophysicsTests = await prisma.biophysicsTest.findMany()
     * 
     * // Get first 10 BiophysicsTests
     * const biophysicsTests = await prisma.biophysicsTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const biophysicsTestWithIdOnly = await prisma.biophysicsTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BiophysicsTestFindManyArgs>(args?: SelectSubset<T, BiophysicsTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BiophysicsTest.
     * @param {BiophysicsTestCreateArgs} args - Arguments to create a BiophysicsTest.
     * @example
     * // Create one BiophysicsTest
     * const BiophysicsTest = await prisma.biophysicsTest.create({
     *   data: {
     *     // ... data to create a BiophysicsTest
     *   }
     * })
     * 
     */
    create<T extends BiophysicsTestCreateArgs>(args: SelectSubset<T, BiophysicsTestCreateArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BiophysicsTests.
     * @param {BiophysicsTestCreateManyArgs} args - Arguments to create many BiophysicsTests.
     * @example
     * // Create many BiophysicsTests
     * const biophysicsTest = await prisma.biophysicsTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BiophysicsTestCreateManyArgs>(args?: SelectSubset<T, BiophysicsTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BiophysicsTests and returns the data saved in the database.
     * @param {BiophysicsTestCreateManyAndReturnArgs} args - Arguments to create many BiophysicsTests.
     * @example
     * // Create many BiophysicsTests
     * const biophysicsTest = await prisma.biophysicsTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BiophysicsTests and only return the `id`
     * const biophysicsTestWithIdOnly = await prisma.biophysicsTest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BiophysicsTestCreateManyAndReturnArgs>(args?: SelectSubset<T, BiophysicsTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BiophysicsTest.
     * @param {BiophysicsTestDeleteArgs} args - Arguments to delete one BiophysicsTest.
     * @example
     * // Delete one BiophysicsTest
     * const BiophysicsTest = await prisma.biophysicsTest.delete({
     *   where: {
     *     // ... filter to delete one BiophysicsTest
     *   }
     * })
     * 
     */
    delete<T extends BiophysicsTestDeleteArgs>(args: SelectSubset<T, BiophysicsTestDeleteArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BiophysicsTest.
     * @param {BiophysicsTestUpdateArgs} args - Arguments to update one BiophysicsTest.
     * @example
     * // Update one BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BiophysicsTestUpdateArgs>(args: SelectSubset<T, BiophysicsTestUpdateArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BiophysicsTests.
     * @param {BiophysicsTestDeleteManyArgs} args - Arguments to filter BiophysicsTests to delete.
     * @example
     * // Delete a few BiophysicsTests
     * const { count } = await prisma.biophysicsTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BiophysicsTestDeleteManyArgs>(args?: SelectSubset<T, BiophysicsTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BiophysicsTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BiophysicsTests
     * const biophysicsTest = await prisma.biophysicsTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BiophysicsTestUpdateManyArgs>(args: SelectSubset<T, BiophysicsTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BiophysicsTest.
     * @param {BiophysicsTestUpsertArgs} args - Arguments to update or create a BiophysicsTest.
     * @example
     * // Update or create a BiophysicsTest
     * const biophysicsTest = await prisma.biophysicsTest.upsert({
     *   create: {
     *     // ... data to create a BiophysicsTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BiophysicsTest we want to update
     *   }
     * })
     */
    upsert<T extends BiophysicsTestUpsertArgs>(args: SelectSubset<T, BiophysicsTestUpsertArgs<ExtArgs>>): Prisma__BiophysicsTestClient<$Result.GetResult<Prisma.$BiophysicsTestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BiophysicsTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestCountArgs} args - Arguments to filter BiophysicsTests to count.
     * @example
     * // Count the number of BiophysicsTests
     * const count = await prisma.biophysicsTest.count({
     *   where: {
     *     // ... the filter for the BiophysicsTests we want to count
     *   }
     * })
    **/
    count<T extends BiophysicsTestCountArgs>(
      args?: Subset<T, BiophysicsTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiophysicsTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BiophysicsTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiophysicsTestAggregateArgs>(args: Subset<T, BiophysicsTestAggregateArgs>): Prisma.PrismaPromise<GetBiophysicsTestAggregateType<T>>

    /**
     * Group by BiophysicsTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiophysicsTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BiophysicsTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BiophysicsTestGroupByArgs['orderBy'] }
        : { orderBy?: BiophysicsTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BiophysicsTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiophysicsTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BiophysicsTest model
   */
  readonly fields: BiophysicsTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BiophysicsTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BiophysicsTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paciente<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BiophysicsTest model
   */ 
  interface BiophysicsTestFieldRefs {
    readonly id: FieldRef<"BiophysicsTest", 'String'>
    readonly pacienteId: FieldRef<"BiophysicsTest", 'String'>
    readonly fecha: FieldRef<"BiophysicsTest", 'DateTime'>
    readonly genero: FieldRef<"BiophysicsTest", 'String'>
    readonly grasa: FieldRef<"BiophysicsTest", 'Float'>
    readonly grasaEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly imc: FieldRef<"BiophysicsTest", 'Float'>
    readonly imcEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly reflejosMed1: FieldRef<"BiophysicsTest", 'Float'>
    readonly reflejosMed2: FieldRef<"BiophysicsTest", 'Float'>
    readonly reflejosMed3: FieldRef<"BiophysicsTest", 'Float'>
    readonly reflejosPromedio: FieldRef<"BiophysicsTest", 'Float'>
    readonly reflejosEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly acomodacion: FieldRef<"BiophysicsTest", 'Float'>
    readonly acomodacionEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly balanceMed1: FieldRef<"BiophysicsTest", 'Float'>
    readonly balanceMed2: FieldRef<"BiophysicsTest", 'Float'>
    readonly balanceMed3: FieldRef<"BiophysicsTest", 'Float'>
    readonly balancePromedio: FieldRef<"BiophysicsTest", 'Float'>
    readonly balanceEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly hidratacion: FieldRef<"BiophysicsTest", 'Float'>
    readonly hidratacionEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly sistolica: FieldRef<"BiophysicsTest", 'Float'>
    readonly sistolicaEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly diastolica: FieldRef<"BiophysicsTest", 'Float'>
    readonly diastolicaEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly pulsoReposo: FieldRef<"BiophysicsTest", 'Float'>
    readonly pulsoReposoEdadCalculada: FieldRef<"BiophysicsTest", 'Float'>
    readonly edadCronologica: FieldRef<"BiophysicsTest", 'Float'>
    readonly edadBiofisica: FieldRef<"BiophysicsTest", 'Float'>
    readonly edadDiferencial: FieldRef<"BiophysicsTest", 'Float'>
    readonly evaluacion: FieldRef<"BiophysicsTest", 'String'>
    readonly fechaCreacion: FieldRef<"BiophysicsTest", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"BiophysicsTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BiophysicsTest findUnique
   */
  export type BiophysicsTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter, which BiophysicsTest to fetch.
     */
    where: BiophysicsTestWhereUniqueInput
  }

  /**
   * BiophysicsTest findUniqueOrThrow
   */
  export type BiophysicsTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter, which BiophysicsTest to fetch.
     */
    where: BiophysicsTestWhereUniqueInput
  }

  /**
   * BiophysicsTest findFirst
   */
  export type BiophysicsTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter, which BiophysicsTest to fetch.
     */
    where?: BiophysicsTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiophysicsTests to fetch.
     */
    orderBy?: BiophysicsTestOrderByWithRelationInput | BiophysicsTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BiophysicsTests.
     */
    cursor?: BiophysicsTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiophysicsTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiophysicsTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BiophysicsTests.
     */
    distinct?: BiophysicsTestScalarFieldEnum | BiophysicsTestScalarFieldEnum[]
  }

  /**
   * BiophysicsTest findFirstOrThrow
   */
  export type BiophysicsTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter, which BiophysicsTest to fetch.
     */
    where?: BiophysicsTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiophysicsTests to fetch.
     */
    orderBy?: BiophysicsTestOrderByWithRelationInput | BiophysicsTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BiophysicsTests.
     */
    cursor?: BiophysicsTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiophysicsTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiophysicsTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BiophysicsTests.
     */
    distinct?: BiophysicsTestScalarFieldEnum | BiophysicsTestScalarFieldEnum[]
  }

  /**
   * BiophysicsTest findMany
   */
  export type BiophysicsTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter, which BiophysicsTests to fetch.
     */
    where?: BiophysicsTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiophysicsTests to fetch.
     */
    orderBy?: BiophysicsTestOrderByWithRelationInput | BiophysicsTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BiophysicsTests.
     */
    cursor?: BiophysicsTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiophysicsTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiophysicsTests.
     */
    skip?: number
    distinct?: BiophysicsTestScalarFieldEnum | BiophysicsTestScalarFieldEnum[]
  }

  /**
   * BiophysicsTest create
   */
  export type BiophysicsTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * The data needed to create a BiophysicsTest.
     */
    data: XOR<BiophysicsTestCreateInput, BiophysicsTestUncheckedCreateInput>
  }

  /**
   * BiophysicsTest createMany
   */
  export type BiophysicsTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BiophysicsTests.
     */
    data: BiophysicsTestCreateManyInput | BiophysicsTestCreateManyInput[]
  }

  /**
   * BiophysicsTest createManyAndReturn
   */
  export type BiophysicsTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BiophysicsTests.
     */
    data: BiophysicsTestCreateManyInput | BiophysicsTestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BiophysicsTest update
   */
  export type BiophysicsTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * The data needed to update a BiophysicsTest.
     */
    data: XOR<BiophysicsTestUpdateInput, BiophysicsTestUncheckedUpdateInput>
    /**
     * Choose, which BiophysicsTest to update.
     */
    where: BiophysicsTestWhereUniqueInput
  }

  /**
   * BiophysicsTest updateMany
   */
  export type BiophysicsTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BiophysicsTests.
     */
    data: XOR<BiophysicsTestUpdateManyMutationInput, BiophysicsTestUncheckedUpdateManyInput>
    /**
     * Filter which BiophysicsTests to update
     */
    where?: BiophysicsTestWhereInput
  }

  /**
   * BiophysicsTest upsert
   */
  export type BiophysicsTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * The filter to search for the BiophysicsTest to update in case it exists.
     */
    where: BiophysicsTestWhereUniqueInput
    /**
     * In case the BiophysicsTest found by the `where` argument doesn't exist, create a new BiophysicsTest with this data.
     */
    create: XOR<BiophysicsTestCreateInput, BiophysicsTestUncheckedCreateInput>
    /**
     * In case the BiophysicsTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BiophysicsTestUpdateInput, BiophysicsTestUncheckedUpdateInput>
  }

  /**
   * BiophysicsTest delete
   */
  export type BiophysicsTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
    /**
     * Filter which BiophysicsTest to delete.
     */
    where: BiophysicsTestWhereUniqueInput
  }

  /**
   * BiophysicsTest deleteMany
   */
  export type BiophysicsTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BiophysicsTests to delete
     */
    where?: BiophysicsTestWhereInput
  }

  /**
   * BiophysicsTest without action
   */
  export type BiophysicsTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiophysicsTest
     */
    select?: BiophysicsTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiophysicsTestInclude<ExtArgs> | null
  }


  /**
   * Model Range
   */

  export type AggregateRange = {
    _count: RangeCountAggregateOutputType | null
    _avg: RangeAvgAggregateOutputType | null
    _sum: RangeSumAggregateOutputType | null
    _min: RangeMinAggregateOutputType | null
    _max: RangeMaxAggregateOutputType | null
  }

  export type RangeAvgAggregateOutputType = {
    id: number | null
    minAge: number | null
    maxAge: number | null
  }

  export type RangeSumAggregateOutputType = {
    id: number | null
    minAge: number | null
    maxAge: number | null
  }

  export type RangeMinAggregateOutputType = {
    id: number | null
    name: string | null
    minAge: number | null
    maxAge: number | null
    description: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RangeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    minAge: number | null
    maxAge: number | null
    description: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RangeCountAggregateOutputType = {
    id: number
    name: number
    minAge: number
    maxAge: number
    description: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RangeAvgAggregateInputType = {
    id?: true
    minAge?: true
    maxAge?: true
  }

  export type RangeSumAggregateInputType = {
    id?: true
    minAge?: true
    maxAge?: true
  }

  export type RangeMinAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RangeMaxAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RangeCountAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    description?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Range to aggregate.
     */
    where?: RangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranges to fetch.
     */
    orderBy?: RangeOrderByWithRelationInput | RangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ranges
    **/
    _count?: true | RangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RangeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RangeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RangeMaxAggregateInputType
  }

  export type GetRangeAggregateType<T extends RangeAggregateArgs> = {
        [P in keyof T & keyof AggregateRange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRange[P]>
      : GetScalarType<T[P], AggregateRange[P]>
  }




  export type RangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RangeWhereInput
    orderBy?: RangeOrderByWithAggregationInput | RangeOrderByWithAggregationInput[]
    by: RangeScalarFieldEnum[] | RangeScalarFieldEnum
    having?: RangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RangeCountAggregateInputType | true
    _avg?: RangeAvgAggregateInputType
    _sum?: RangeSumAggregateInputType
    _min?: RangeMinAggregateInputType
    _max?: RangeMaxAggregateInputType
  }

  export type RangeGroupByOutputType = {
    id: number
    name: string
    minAge: number
    maxAge: number
    description: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: RangeCountAggregateOutputType | null
    _avg: RangeAvgAggregateOutputType | null
    _sum: RangeSumAggregateOutputType | null
    _min: RangeMinAggregateOutputType | null
    _max: RangeMaxAggregateOutputType | null
  }

  type GetRangeGroupByPayload<T extends RangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RangeGroupByOutputType[P]>
            : GetScalarType<T[P], RangeGroupByOutputType[P]>
        }
      >
    >


  export type RangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAge?: boolean
    maxAge?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    boards?: boolean | Range$boardsArgs<ExtArgs>
    _count?: boolean | RangeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["range"]>

  export type RangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAge?: boolean
    maxAge?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["range"]>

  export type RangeSelectScalar = {
    id?: boolean
    name?: boolean
    minAge?: boolean
    maxAge?: boolean
    description?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boards?: boolean | Range$boardsArgs<ExtArgs>
    _count?: boolean | RangeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Range"
    objects: {
      boards: Prisma.$BoardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      minAge: number
      maxAge: number
      description: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["range"]>
    composites: {}
  }

  type RangeGetPayload<S extends boolean | null | undefined | RangeDefaultArgs> = $Result.GetResult<Prisma.$RangePayload, S>

  type RangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RangeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RangeCountAggregateInputType | true
    }

  export interface RangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Range'], meta: { name: 'Range' } }
    /**
     * Find zero or one Range that matches the filter.
     * @param {RangeFindUniqueArgs} args - Arguments to find a Range
     * @example
     * // Get one Range
     * const range = await prisma.range.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RangeFindUniqueArgs>(args: SelectSubset<T, RangeFindUniqueArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Range that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RangeFindUniqueOrThrowArgs} args - Arguments to find a Range
     * @example
     * // Get one Range
     * const range = await prisma.range.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RangeFindUniqueOrThrowArgs>(args: SelectSubset<T, RangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Range that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeFindFirstArgs} args - Arguments to find a Range
     * @example
     * // Get one Range
     * const range = await prisma.range.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RangeFindFirstArgs>(args?: SelectSubset<T, RangeFindFirstArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Range that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeFindFirstOrThrowArgs} args - Arguments to find a Range
     * @example
     * // Get one Range
     * const range = await prisma.range.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RangeFindFirstOrThrowArgs>(args?: SelectSubset<T, RangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ranges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ranges
     * const ranges = await prisma.range.findMany()
     * 
     * // Get first 10 Ranges
     * const ranges = await prisma.range.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rangeWithIdOnly = await prisma.range.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RangeFindManyArgs>(args?: SelectSubset<T, RangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Range.
     * @param {RangeCreateArgs} args - Arguments to create a Range.
     * @example
     * // Create one Range
     * const Range = await prisma.range.create({
     *   data: {
     *     // ... data to create a Range
     *   }
     * })
     * 
     */
    create<T extends RangeCreateArgs>(args: SelectSubset<T, RangeCreateArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ranges.
     * @param {RangeCreateManyArgs} args - Arguments to create many Ranges.
     * @example
     * // Create many Ranges
     * const range = await prisma.range.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RangeCreateManyArgs>(args?: SelectSubset<T, RangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ranges and returns the data saved in the database.
     * @param {RangeCreateManyAndReturnArgs} args - Arguments to create many Ranges.
     * @example
     * // Create many Ranges
     * const range = await prisma.range.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ranges and only return the `id`
     * const rangeWithIdOnly = await prisma.range.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RangeCreateManyAndReturnArgs>(args?: SelectSubset<T, RangeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Range.
     * @param {RangeDeleteArgs} args - Arguments to delete one Range.
     * @example
     * // Delete one Range
     * const Range = await prisma.range.delete({
     *   where: {
     *     // ... filter to delete one Range
     *   }
     * })
     * 
     */
    delete<T extends RangeDeleteArgs>(args: SelectSubset<T, RangeDeleteArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Range.
     * @param {RangeUpdateArgs} args - Arguments to update one Range.
     * @example
     * // Update one Range
     * const range = await prisma.range.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RangeUpdateArgs>(args: SelectSubset<T, RangeUpdateArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ranges.
     * @param {RangeDeleteManyArgs} args - Arguments to filter Ranges to delete.
     * @example
     * // Delete a few Ranges
     * const { count } = await prisma.range.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RangeDeleteManyArgs>(args?: SelectSubset<T, RangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ranges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ranges
     * const range = await prisma.range.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RangeUpdateManyArgs>(args: SelectSubset<T, RangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Range.
     * @param {RangeUpsertArgs} args - Arguments to update or create a Range.
     * @example
     * // Update or create a Range
     * const range = await prisma.range.upsert({
     *   create: {
     *     // ... data to create a Range
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Range we want to update
     *   }
     * })
     */
    upsert<T extends RangeUpsertArgs>(args: SelectSubset<T, RangeUpsertArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ranges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeCountArgs} args - Arguments to filter Ranges to count.
     * @example
     * // Count the number of Ranges
     * const count = await prisma.range.count({
     *   where: {
     *     // ... the filter for the Ranges we want to count
     *   }
     * })
    **/
    count<T extends RangeCountArgs>(
      args?: Subset<T, RangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Range.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RangeAggregateArgs>(args: Subset<T, RangeAggregateArgs>): Prisma.PrismaPromise<GetRangeAggregateType<T>>

    /**
     * Group by Range.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RangeGroupByArgs['orderBy'] }
        : { orderBy?: RangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Range model
   */
  readonly fields: RangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Range.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    boards<T extends Range$boardsArgs<ExtArgs> = {}>(args?: Subset<T, Range$boardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Range model
   */ 
  interface RangeFieldRefs {
    readonly id: FieldRef<"Range", 'Int'>
    readonly name: FieldRef<"Range", 'String'>
    readonly minAge: FieldRef<"Range", 'Int'>
    readonly maxAge: FieldRef<"Range", 'Int'>
    readonly description: FieldRef<"Range", 'String'>
    readonly active: FieldRef<"Range", 'Boolean'>
    readonly createdAt: FieldRef<"Range", 'DateTime'>
    readonly updatedAt: FieldRef<"Range", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Range findUnique
   */
  export type RangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter, which Range to fetch.
     */
    where: RangeWhereUniqueInput
  }

  /**
   * Range findUniqueOrThrow
   */
  export type RangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter, which Range to fetch.
     */
    where: RangeWhereUniqueInput
  }

  /**
   * Range findFirst
   */
  export type RangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter, which Range to fetch.
     */
    where?: RangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranges to fetch.
     */
    orderBy?: RangeOrderByWithRelationInput | RangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranges.
     */
    cursor?: RangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranges.
     */
    distinct?: RangeScalarFieldEnum | RangeScalarFieldEnum[]
  }

  /**
   * Range findFirstOrThrow
   */
  export type RangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter, which Range to fetch.
     */
    where?: RangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranges to fetch.
     */
    orderBy?: RangeOrderByWithRelationInput | RangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranges.
     */
    cursor?: RangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranges.
     */
    distinct?: RangeScalarFieldEnum | RangeScalarFieldEnum[]
  }

  /**
   * Range findMany
   */
  export type RangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter, which Ranges to fetch.
     */
    where?: RangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranges to fetch.
     */
    orderBy?: RangeOrderByWithRelationInput | RangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ranges.
     */
    cursor?: RangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranges.
     */
    skip?: number
    distinct?: RangeScalarFieldEnum | RangeScalarFieldEnum[]
  }

  /**
   * Range create
   */
  export type RangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * The data needed to create a Range.
     */
    data: XOR<RangeCreateInput, RangeUncheckedCreateInput>
  }

  /**
   * Range createMany
   */
  export type RangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ranges.
     */
    data: RangeCreateManyInput | RangeCreateManyInput[]
  }

  /**
   * Range createManyAndReturn
   */
  export type RangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ranges.
     */
    data: RangeCreateManyInput | RangeCreateManyInput[]
  }

  /**
   * Range update
   */
  export type RangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * The data needed to update a Range.
     */
    data: XOR<RangeUpdateInput, RangeUncheckedUpdateInput>
    /**
     * Choose, which Range to update.
     */
    where: RangeWhereUniqueInput
  }

  /**
   * Range updateMany
   */
  export type RangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ranges.
     */
    data: XOR<RangeUpdateManyMutationInput, RangeUncheckedUpdateManyInput>
    /**
     * Filter which Ranges to update
     */
    where?: RangeWhereInput
  }

  /**
   * Range upsert
   */
  export type RangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * The filter to search for the Range to update in case it exists.
     */
    where: RangeWhereUniqueInput
    /**
     * In case the Range found by the `where` argument doesn't exist, create a new Range with this data.
     */
    create: XOR<RangeCreateInput, RangeUncheckedCreateInput>
    /**
     * In case the Range was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RangeUpdateInput, RangeUncheckedUpdateInput>
  }

  /**
   * Range delete
   */
  export type RangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
    /**
     * Filter which Range to delete.
     */
    where: RangeWhereUniqueInput
  }

  /**
   * Range deleteMany
   */
  export type RangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ranges to delete
     */
    where?: RangeWhereInput
  }

  /**
   * Range.boards
   */
  export type Range$boardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    cursor?: BoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Range without action
   */
  export type RangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Range
     */
    select?: RangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RangeInclude<ExtArgs> | null
  }


  /**
   * Model Board
   */

  export type AggregateBoard = {
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  export type BoardAvgAggregateOutputType = {
    id: number | null
    rangeId: number | null
    min: number | null
    max: number | null
  }

  export type BoardSumAggregateOutputType = {
    id: number | null
    rangeId: number | null
    min: number | null
    max: number | null
  }

  export type BoardMinAggregateOutputType = {
    id: number | null
    rangeId: number | null
    type: string | null
    name: string | null
    min: number | null
    max: number | null
    inverse: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardMaxAggregateOutputType = {
    id: number | null
    rangeId: number | null
    type: string | null
    name: string | null
    min: number | null
    max: number | null
    inverse: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardCountAggregateOutputType = {
    id: number
    rangeId: number
    type: number
    name: number
    min: number
    max: number
    inverse: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BoardAvgAggregateInputType = {
    id?: true
    rangeId?: true
    min?: true
    max?: true
  }

  export type BoardSumAggregateInputType = {
    id?: true
    rangeId?: true
    min?: true
    max?: true
  }

  export type BoardMinAggregateInputType = {
    id?: true
    rangeId?: true
    type?: true
    name?: true
    min?: true
    max?: true
    inverse?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardMaxAggregateInputType = {
    id?: true
    rangeId?: true
    type?: true
    name?: true
    min?: true
    max?: true
    inverse?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardCountAggregateInputType = {
    id?: true
    rangeId?: true
    type?: true
    name?: true
    min?: true
    max?: true
    inverse?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Board to aggregate.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMaxAggregateInputType
  }

  export type GetBoardAggregateType<T extends BoardAggregateArgs> = {
        [P in keyof T & keyof AggregateBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoard[P]>
      : GetScalarType<T[P], AggregateBoard[P]>
  }




  export type BoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithAggregationInput | BoardOrderByWithAggregationInput[]
    by: BoardScalarFieldEnum[] | BoardScalarFieldEnum
    having?: BoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardCountAggregateInputType | true
    _avg?: BoardAvgAggregateInputType
    _sum?: BoardSumAggregateInputType
    _min?: BoardMinAggregateInputType
    _max?: BoardMaxAggregateInputType
  }

  export type BoardGroupByOutputType = {
    id: number
    rangeId: number
    type: string
    name: string
    min: number
    max: number
    inverse: boolean
    createdAt: Date
    updatedAt: Date
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  type GetBoardGroupByPayload<T extends BoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardGroupByOutputType[P]>
            : GetScalarType<T[P], BoardGroupByOutputType[P]>
        }
      >
    >


  export type BoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rangeId?: boolean
    type?: boolean
    name?: boolean
    min?: boolean
    max?: boolean
    inverse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    range?: boolean | RangeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rangeId?: boolean
    type?: boolean
    name?: boolean
    min?: boolean
    max?: boolean
    inverse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    range?: boolean | RangeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectScalar = {
    id?: boolean
    rangeId?: boolean
    type?: boolean
    name?: boolean
    min?: boolean
    max?: boolean
    inverse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    range?: boolean | RangeDefaultArgs<ExtArgs>
  }
  export type BoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    range?: boolean | RangeDefaultArgs<ExtArgs>
  }

  export type $BoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Board"
    objects: {
      range: Prisma.$RangePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rangeId: number
      type: string
      name: string
      min: number
      max: number
      inverse: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["board"]>
    composites: {}
  }

  type BoardGetPayload<S extends boolean | null | undefined | BoardDefaultArgs> = $Result.GetResult<Prisma.$BoardPayload, S>

  type BoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardCountAggregateInputType | true
    }

  export interface BoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Board'], meta: { name: 'Board' } }
    /**
     * Find zero or one Board that matches the filter.
     * @param {BoardFindUniqueArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardFindUniqueArgs>(args: SelectSubset<T, BoardFindUniqueArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Board that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoardFindUniqueOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Board that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardFindFirstArgs>(args?: SelectSubset<T, BoardFindFirstArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Board that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.board.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.board.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardWithIdOnly = await prisma.board.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoardFindManyArgs>(args?: SelectSubset<T, BoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Board.
     * @param {BoardCreateArgs} args - Arguments to create a Board.
     * @example
     * // Create one Board
     * const Board = await prisma.board.create({
     *   data: {
     *     // ... data to create a Board
     *   }
     * })
     * 
     */
    create<T extends BoardCreateArgs>(args: SelectSubset<T, BoardCreateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Boards.
     * @param {BoardCreateManyArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardCreateManyArgs>(args?: SelectSubset<T, BoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boards and returns the data saved in the database.
     * @param {BoardCreateManyAndReturnArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boards and only return the `id`
     * const boardWithIdOnly = await prisma.board.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Board.
     * @param {BoardDeleteArgs} args - Arguments to delete one Board.
     * @example
     * // Delete one Board
     * const Board = await prisma.board.delete({
     *   where: {
     *     // ... filter to delete one Board
     *   }
     * })
     * 
     */
    delete<T extends BoardDeleteArgs>(args: SelectSubset<T, BoardDeleteArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Board.
     * @param {BoardUpdateArgs} args - Arguments to update one Board.
     * @example
     * // Update one Board
     * const board = await prisma.board.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardUpdateArgs>(args: SelectSubset<T, BoardUpdateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Boards.
     * @param {BoardDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.board.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardDeleteManyArgs>(args?: SelectSubset<T, BoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const board = await prisma.board.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardUpdateManyArgs>(args: SelectSubset<T, BoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Board.
     * @param {BoardUpsertArgs} args - Arguments to update or create a Board.
     * @example
     * // Update or create a Board
     * const board = await prisma.board.upsert({
     *   create: {
     *     // ... data to create a Board
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board we want to update
     *   }
     * })
     */
    upsert<T extends BoardUpsertArgs>(args: SelectSubset<T, BoardUpsertArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.board.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardCountArgs>(
      args?: Subset<T, BoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardAggregateArgs>(args: Subset<T, BoardAggregateArgs>): Prisma.PrismaPromise<GetBoardAggregateType<T>>

    /**
     * Group by Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardGroupByArgs['orderBy'] }
        : { orderBy?: BoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Board model
   */
  readonly fields: BoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Board.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    range<T extends RangeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RangeDefaultArgs<ExtArgs>>): Prisma__RangeClient<$Result.GetResult<Prisma.$RangePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Board model
   */ 
  interface BoardFieldRefs {
    readonly id: FieldRef<"Board", 'Int'>
    readonly rangeId: FieldRef<"Board", 'Int'>
    readonly type: FieldRef<"Board", 'String'>
    readonly name: FieldRef<"Board", 'String'>
    readonly min: FieldRef<"Board", 'Float'>
    readonly max: FieldRef<"Board", 'Float'>
    readonly inverse: FieldRef<"Board", 'Boolean'>
    readonly createdAt: FieldRef<"Board", 'DateTime'>
    readonly updatedAt: FieldRef<"Board", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Board findUnique
   */
  export type BoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findUniqueOrThrow
   */
  export type BoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findFirst
   */
  export type BoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findFirstOrThrow
   */
  export type BoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findMany
   */
  export type BoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board create
   */
  export type BoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to create a Board.
     */
    data: XOR<BoardCreateInput, BoardUncheckedCreateInput>
  }

  /**
   * Board createMany
   */
  export type BoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
  }

  /**
   * Board createManyAndReturn
   */
  export type BoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Board update
   */
  export type BoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to update a Board.
     */
    data: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
    /**
     * Choose, which Board to update.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board updateMany
   */
  export type BoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardWhereInput
  }

  /**
   * Board upsert
   */
  export type BoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The filter to search for the Board to update in case it exists.
     */
    where: BoardWhereUniqueInput
    /**
     * In case the Board found by the `where` argument doesn't exist, create a new Board with this data.
     */
    create: XOR<BoardCreateInput, BoardUncheckedCreateInput>
    /**
     * In case the Board was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
  }

  /**
   * Board delete
   */
  export type BoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter which Board to delete.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board deleteMany
   */
  export type BoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardWhereInput
  }

  /**
   * Board without action
   */
  export type BoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: string
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: string
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PatientScalarFieldEnum: {
    id: 'id',
    foto: 'foto',
    nacionalidad: 'nacionalidad',
    identificacion: 'identificacion',
    fechaHistoria: 'fechaHistoria',
    apellidos: 'apellidos',
    nombres: 'nombres',
    fechaNacimiento: 'fechaNacimiento',
    edadCronologica: 'edadCronologica',
    genero: 'genero',
    lugarNacimiento: 'lugarNacimiento',
    telefono: 'telefono',
    estadoCivil: 'estadoCivil',
    profesion: 'profesion',
    paisResidencia: 'paisResidencia',
    estadoResidencia: 'estadoResidencia',
    ciudad: 'ciudad',
    direccion: 'direccion',
    observaciones: 'observaciones',
    email: 'email',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const BiophysicsTestScalarFieldEnum: {
    id: 'id',
    pacienteId: 'pacienteId',
    fecha: 'fecha',
    genero: 'genero',
    grasa: 'grasa',
    grasaEdadCalculada: 'grasaEdadCalculada',
    imc: 'imc',
    imcEdadCalculada: 'imcEdadCalculada',
    reflejosMed1: 'reflejosMed1',
    reflejosMed2: 'reflejosMed2',
    reflejosMed3: 'reflejosMed3',
    reflejosPromedio: 'reflejosPromedio',
    reflejosEdadCalculada: 'reflejosEdadCalculada',
    acomodacion: 'acomodacion',
    acomodacionEdadCalculada: 'acomodacionEdadCalculada',
    balanceMed1: 'balanceMed1',
    balanceMed2: 'balanceMed2',
    balanceMed3: 'balanceMed3',
    balancePromedio: 'balancePromedio',
    balanceEdadCalculada: 'balanceEdadCalculada',
    hidratacion: 'hidratacion',
    hidratacionEdadCalculada: 'hidratacionEdadCalculada',
    sistolica: 'sistolica',
    sistolicaEdadCalculada: 'sistolicaEdadCalculada',
    diastolica: 'diastolica',
    diastolicaEdadCalculada: 'diastolicaEdadCalculada',
    pulsoReposo: 'pulsoReposo',
    pulsoReposoEdadCalculada: 'pulsoReposoEdadCalculada',
    edadCronologica: 'edadCronologica',
    edadBiofisica: 'edadBiofisica',
    edadDiferencial: 'edadDiferencial',
    evaluacion: 'evaluacion',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type BiophysicsTestScalarFieldEnum = (typeof BiophysicsTestScalarFieldEnum)[keyof typeof BiophysicsTestScalarFieldEnum]


  export const RangeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    minAge: 'minAge',
    maxAge: 'maxAge',
    description: 'description',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RangeScalarFieldEnum = (typeof RangeScalarFieldEnum)[keyof typeof RangeScalarFieldEnum]


  export const BoardScalarFieldEnum: {
    id: 'id',
    rangeId: 'rangeId',
    type: 'type',
    name: 'name',
    min: 'min',
    max: 'max',
    inverse: 'inverse',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BoardScalarFieldEnum = (typeof BoardScalarFieldEnum)[keyof typeof BoardScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    foto?: StringNullableFilter<"Patient"> | string | null
    nacionalidad?: StringFilter<"Patient"> | string
    identificacion?: StringFilter<"Patient"> | string
    fechaHistoria?: DateTimeFilter<"Patient"> | Date | string
    apellidos?: StringFilter<"Patient"> | string
    nombres?: StringFilter<"Patient"> | string
    fechaNacimiento?: DateTimeFilter<"Patient"> | Date | string
    edadCronologica?: IntFilter<"Patient"> | number
    genero?: StringFilter<"Patient"> | string
    lugarNacimiento?: StringFilter<"Patient"> | string
    telefono?: StringNullableFilter<"Patient"> | string | null
    estadoCivil?: StringNullableFilter<"Patient"> | string | null
    profesion?: StringNullableFilter<"Patient"> | string | null
    paisResidencia?: StringFilter<"Patient"> | string
    estadoResidencia?: StringFilter<"Patient"> | string
    ciudad?: StringFilter<"Patient"> | string
    direccion?: StringNullableFilter<"Patient"> | string | null
    observaciones?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    fechaCreacion?: DateTimeFilter<"Patient"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Patient"> | Date | string
    testsBiofisicos?: BiophysicsTestListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    foto?: SortOrderInput | SortOrder
    nacionalidad?: SortOrder
    identificacion?: SortOrder
    fechaHistoria?: SortOrder
    apellidos?: SortOrder
    nombres?: SortOrder
    fechaNacimiento?: SortOrder
    edadCronologica?: SortOrder
    genero?: SortOrder
    lugarNacimiento?: SortOrder
    telefono?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    profesion?: SortOrderInput | SortOrder
    paisResidencia?: SortOrder
    estadoResidencia?: SortOrder
    ciudad?: SortOrder
    direccion?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    testsBiofisicos?: BiophysicsTestOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    identificacion?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    foto?: StringNullableFilter<"Patient"> | string | null
    nacionalidad?: StringFilter<"Patient"> | string
    fechaHistoria?: DateTimeFilter<"Patient"> | Date | string
    apellidos?: StringFilter<"Patient"> | string
    nombres?: StringFilter<"Patient"> | string
    fechaNacimiento?: DateTimeFilter<"Patient"> | Date | string
    edadCronologica?: IntFilter<"Patient"> | number
    genero?: StringFilter<"Patient"> | string
    lugarNacimiento?: StringFilter<"Patient"> | string
    telefono?: StringNullableFilter<"Patient"> | string | null
    estadoCivil?: StringNullableFilter<"Patient"> | string | null
    profesion?: StringNullableFilter<"Patient"> | string | null
    paisResidencia?: StringFilter<"Patient"> | string
    estadoResidencia?: StringFilter<"Patient"> | string
    ciudad?: StringFilter<"Patient"> | string
    direccion?: StringNullableFilter<"Patient"> | string | null
    observaciones?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    fechaCreacion?: DateTimeFilter<"Patient"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Patient"> | Date | string
    testsBiofisicos?: BiophysicsTestListRelationFilter
  }, "id" | "identificacion">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    foto?: SortOrderInput | SortOrder
    nacionalidad?: SortOrder
    identificacion?: SortOrder
    fechaHistoria?: SortOrder
    apellidos?: SortOrder
    nombres?: SortOrder
    fechaNacimiento?: SortOrder
    edadCronologica?: SortOrder
    genero?: SortOrder
    lugarNacimiento?: SortOrder
    telefono?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    profesion?: SortOrderInput | SortOrder
    paisResidencia?: SortOrder
    estadoResidencia?: SortOrder
    ciudad?: SortOrder
    direccion?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    foto?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    nacionalidad?: StringWithAggregatesFilter<"Patient"> | string
    identificacion?: StringWithAggregatesFilter<"Patient"> | string
    fechaHistoria?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    apellidos?: StringWithAggregatesFilter<"Patient"> | string
    nombres?: StringWithAggregatesFilter<"Patient"> | string
    fechaNacimiento?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    edadCronologica?: IntWithAggregatesFilter<"Patient"> | number
    genero?: StringWithAggregatesFilter<"Patient"> | string
    lugarNacimiento?: StringWithAggregatesFilter<"Patient"> | string
    telefono?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    estadoCivil?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    profesion?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    paisResidencia?: StringWithAggregatesFilter<"Patient"> | string
    estadoResidencia?: StringWithAggregatesFilter<"Patient"> | string
    ciudad?: StringWithAggregatesFilter<"Patient"> | string
    direccion?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    fechaCreacion?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type BiophysicsTestWhereInput = {
    AND?: BiophysicsTestWhereInput | BiophysicsTestWhereInput[]
    OR?: BiophysicsTestWhereInput[]
    NOT?: BiophysicsTestWhereInput | BiophysicsTestWhereInput[]
    id?: StringFilter<"BiophysicsTest"> | string
    pacienteId?: StringFilter<"BiophysicsTest"> | string
    fecha?: DateTimeFilter<"BiophysicsTest"> | Date | string
    genero?: StringFilter<"BiophysicsTest"> | string
    grasa?: FloatNullableFilter<"BiophysicsTest"> | number | null
    grasaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imc?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imcEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosPromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balancePromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposo?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposoEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadCronologica?: FloatFilter<"BiophysicsTest"> | number
    edadBiofisica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadDiferencial?: FloatNullableFilter<"BiophysicsTest"> | number | null
    evaluacion?: StringNullableFilter<"BiophysicsTest"> | string | null
    fechaCreacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
    fechaActualizacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
    paciente?: XOR<PatientRelationFilter, PatientWhereInput>
  }

  export type BiophysicsTestOrderByWithRelationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fecha?: SortOrder
    genero?: SortOrder
    grasa?: SortOrderInput | SortOrder
    grasaEdadCalculada?: SortOrderInput | SortOrder
    imc?: SortOrderInput | SortOrder
    imcEdadCalculada?: SortOrderInput | SortOrder
    reflejosMed1?: SortOrderInput | SortOrder
    reflejosMed2?: SortOrderInput | SortOrder
    reflejosMed3?: SortOrderInput | SortOrder
    reflejosPromedio?: SortOrderInput | SortOrder
    reflejosEdadCalculada?: SortOrderInput | SortOrder
    acomodacion?: SortOrderInput | SortOrder
    acomodacionEdadCalculada?: SortOrderInput | SortOrder
    balanceMed1?: SortOrderInput | SortOrder
    balanceMed2?: SortOrderInput | SortOrder
    balanceMed3?: SortOrderInput | SortOrder
    balancePromedio?: SortOrderInput | SortOrder
    balanceEdadCalculada?: SortOrderInput | SortOrder
    hidratacion?: SortOrderInput | SortOrder
    hidratacionEdadCalculada?: SortOrderInput | SortOrder
    sistolica?: SortOrderInput | SortOrder
    sistolicaEdadCalculada?: SortOrderInput | SortOrder
    diastolica?: SortOrderInput | SortOrder
    diastolicaEdadCalculada?: SortOrderInput | SortOrder
    pulsoReposo?: SortOrderInput | SortOrder
    pulsoReposoEdadCalculada?: SortOrderInput | SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrderInput | SortOrder
    edadDiferencial?: SortOrderInput | SortOrder
    evaluacion?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    paciente?: PatientOrderByWithRelationInput
  }

  export type BiophysicsTestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BiophysicsTestWhereInput | BiophysicsTestWhereInput[]
    OR?: BiophysicsTestWhereInput[]
    NOT?: BiophysicsTestWhereInput | BiophysicsTestWhereInput[]
    pacienteId?: StringFilter<"BiophysicsTest"> | string
    fecha?: DateTimeFilter<"BiophysicsTest"> | Date | string
    genero?: StringFilter<"BiophysicsTest"> | string
    grasa?: FloatNullableFilter<"BiophysicsTest"> | number | null
    grasaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imc?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imcEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosPromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balancePromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposo?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposoEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadCronologica?: FloatFilter<"BiophysicsTest"> | number
    edadBiofisica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadDiferencial?: FloatNullableFilter<"BiophysicsTest"> | number | null
    evaluacion?: StringNullableFilter<"BiophysicsTest"> | string | null
    fechaCreacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
    fechaActualizacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
    paciente?: XOR<PatientRelationFilter, PatientWhereInput>
  }, "id">

  export type BiophysicsTestOrderByWithAggregationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fecha?: SortOrder
    genero?: SortOrder
    grasa?: SortOrderInput | SortOrder
    grasaEdadCalculada?: SortOrderInput | SortOrder
    imc?: SortOrderInput | SortOrder
    imcEdadCalculada?: SortOrderInput | SortOrder
    reflejosMed1?: SortOrderInput | SortOrder
    reflejosMed2?: SortOrderInput | SortOrder
    reflejosMed3?: SortOrderInput | SortOrder
    reflejosPromedio?: SortOrderInput | SortOrder
    reflejosEdadCalculada?: SortOrderInput | SortOrder
    acomodacion?: SortOrderInput | SortOrder
    acomodacionEdadCalculada?: SortOrderInput | SortOrder
    balanceMed1?: SortOrderInput | SortOrder
    balanceMed2?: SortOrderInput | SortOrder
    balanceMed3?: SortOrderInput | SortOrder
    balancePromedio?: SortOrderInput | SortOrder
    balanceEdadCalculada?: SortOrderInput | SortOrder
    hidratacion?: SortOrderInput | SortOrder
    hidratacionEdadCalculada?: SortOrderInput | SortOrder
    sistolica?: SortOrderInput | SortOrder
    sistolicaEdadCalculada?: SortOrderInput | SortOrder
    diastolica?: SortOrderInput | SortOrder
    diastolicaEdadCalculada?: SortOrderInput | SortOrder
    pulsoReposo?: SortOrderInput | SortOrder
    pulsoReposoEdadCalculada?: SortOrderInput | SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrderInput | SortOrder
    edadDiferencial?: SortOrderInput | SortOrder
    evaluacion?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: BiophysicsTestCountOrderByAggregateInput
    _avg?: BiophysicsTestAvgOrderByAggregateInput
    _max?: BiophysicsTestMaxOrderByAggregateInput
    _min?: BiophysicsTestMinOrderByAggregateInput
    _sum?: BiophysicsTestSumOrderByAggregateInput
  }

  export type BiophysicsTestScalarWhereWithAggregatesInput = {
    AND?: BiophysicsTestScalarWhereWithAggregatesInput | BiophysicsTestScalarWhereWithAggregatesInput[]
    OR?: BiophysicsTestScalarWhereWithAggregatesInput[]
    NOT?: BiophysicsTestScalarWhereWithAggregatesInput | BiophysicsTestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BiophysicsTest"> | string
    pacienteId?: StringWithAggregatesFilter<"BiophysicsTest"> | string
    fecha?: DateTimeWithAggregatesFilter<"BiophysicsTest"> | Date | string
    genero?: StringWithAggregatesFilter<"BiophysicsTest"> | string
    grasa?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    grasaEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    imc?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    imcEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    reflejosMed1?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    reflejosMed2?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    reflejosMed3?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    reflejosPromedio?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    reflejosEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    acomodacion?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    acomodacionEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    balanceMed1?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    balanceMed2?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    balanceMed3?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    balancePromedio?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    balanceEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    hidratacion?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    hidratacionEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    sistolica?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    sistolicaEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    diastolica?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    diastolicaEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    pulsoReposo?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    pulsoReposoEdadCalculada?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    edadCronologica?: FloatWithAggregatesFilter<"BiophysicsTest"> | number
    edadBiofisica?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    edadDiferencial?: FloatNullableWithAggregatesFilter<"BiophysicsTest"> | number | null
    evaluacion?: StringNullableWithAggregatesFilter<"BiophysicsTest"> | string | null
    fechaCreacion?: DateTimeWithAggregatesFilter<"BiophysicsTest"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"BiophysicsTest"> | Date | string
  }

  export type RangeWhereInput = {
    AND?: RangeWhereInput | RangeWhereInput[]
    OR?: RangeWhereInput[]
    NOT?: RangeWhereInput | RangeWhereInput[]
    id?: IntFilter<"Range"> | number
    name?: StringFilter<"Range"> | string
    minAge?: IntFilter<"Range"> | number
    maxAge?: IntFilter<"Range"> | number
    description?: StringNullableFilter<"Range"> | string | null
    active?: BoolFilter<"Range"> | boolean
    createdAt?: DateTimeFilter<"Range"> | Date | string
    updatedAt?: DateTimeFilter<"Range"> | Date | string
    boards?: BoardListRelationFilter
  }

  export type RangeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    boards?: BoardOrderByRelationAggregateInput
  }

  export type RangeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RangeWhereInput | RangeWhereInput[]
    OR?: RangeWhereInput[]
    NOT?: RangeWhereInput | RangeWhereInput[]
    name?: StringFilter<"Range"> | string
    minAge?: IntFilter<"Range"> | number
    maxAge?: IntFilter<"Range"> | number
    description?: StringNullableFilter<"Range"> | string | null
    active?: BoolFilter<"Range"> | boolean
    createdAt?: DateTimeFilter<"Range"> | Date | string
    updatedAt?: DateTimeFilter<"Range"> | Date | string
    boards?: BoardListRelationFilter
  }, "id">

  export type RangeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RangeCountOrderByAggregateInput
    _avg?: RangeAvgOrderByAggregateInput
    _max?: RangeMaxOrderByAggregateInput
    _min?: RangeMinOrderByAggregateInput
    _sum?: RangeSumOrderByAggregateInput
  }

  export type RangeScalarWhereWithAggregatesInput = {
    AND?: RangeScalarWhereWithAggregatesInput | RangeScalarWhereWithAggregatesInput[]
    OR?: RangeScalarWhereWithAggregatesInput[]
    NOT?: RangeScalarWhereWithAggregatesInput | RangeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Range"> | number
    name?: StringWithAggregatesFilter<"Range"> | string
    minAge?: IntWithAggregatesFilter<"Range"> | number
    maxAge?: IntWithAggregatesFilter<"Range"> | number
    description?: StringNullableWithAggregatesFilter<"Range"> | string | null
    active?: BoolWithAggregatesFilter<"Range"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Range"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Range"> | Date | string
  }

  export type BoardWhereInput = {
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    id?: IntFilter<"Board"> | number
    rangeId?: IntFilter<"Board"> | number
    type?: StringFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    min?: FloatFilter<"Board"> | number
    max?: FloatFilter<"Board"> | number
    inverse?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    range?: XOR<RangeRelationFilter, RangeWhereInput>
  }

  export type BoardOrderByWithRelationInput = {
    id?: SortOrder
    rangeId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    min?: SortOrder
    max?: SortOrder
    inverse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    range?: RangeOrderByWithRelationInput
  }

  export type BoardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    rangeId?: IntFilter<"Board"> | number
    type?: StringFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    min?: FloatFilter<"Board"> | number
    max?: FloatFilter<"Board"> | number
    inverse?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    range?: XOR<RangeRelationFilter, RangeWhereInput>
  }, "id">

  export type BoardOrderByWithAggregationInput = {
    id?: SortOrder
    rangeId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    min?: SortOrder
    max?: SortOrder
    inverse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BoardCountOrderByAggregateInput
    _avg?: BoardAvgOrderByAggregateInput
    _max?: BoardMaxOrderByAggregateInput
    _min?: BoardMinOrderByAggregateInput
    _sum?: BoardSumOrderByAggregateInput
  }

  export type BoardScalarWhereWithAggregatesInput = {
    AND?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    OR?: BoardScalarWhereWithAggregatesInput[]
    NOT?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Board"> | number
    rangeId?: IntWithAggregatesFilter<"Board"> | number
    type?: StringWithAggregatesFilter<"Board"> | string
    name?: StringWithAggregatesFilter<"Board"> | string
    min?: FloatWithAggregatesFilter<"Board"> | number
    max?: FloatWithAggregatesFilter<"Board"> | number
    inverse?: BoolWithAggregatesFilter<"Board"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    active?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type PatientCreateInput = {
    id?: string
    foto?: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria?: Date | string
    apellidos: string
    nombres: string
    fechaNacimiento: Date | string
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono?: string | null
    estadoCivil?: string | null
    profesion?: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion?: string | null
    observaciones?: string | null
    email?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    testsBiofisicos?: BiophysicsTestCreateNestedManyWithoutPacienteInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    foto?: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria?: Date | string
    apellidos: string
    nombres: string
    fechaNacimiento: Date | string
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono?: string | null
    estadoCivil?: string | null
    profesion?: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion?: string | null
    observaciones?: string | null
    email?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    testsBiofisicos?: BiophysicsTestUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    testsBiofisicos?: BiophysicsTestUpdateManyWithoutPacienteNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    testsBiofisicos?: BiophysicsTestUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    foto?: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria?: Date | string
    apellidos: string
    nombres: string
    fechaNacimiento: Date | string
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono?: string | null
    estadoCivil?: string | null
    profesion?: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion?: string | null
    observaciones?: string | null
    email?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestCreateInput = {
    id?: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    paciente: PatientCreateNestedOneWithoutTestsBiofisicosInput
  }

  export type BiophysicsTestUncheckedCreateInput = {
    id?: string
    pacienteId: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type BiophysicsTestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PatientUpdateOneRequiredWithoutTestsBiofisicosNestedInput
  }

  export type BiophysicsTestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacienteId?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestCreateManyInput = {
    id?: string
    pacienteId: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type BiophysicsTestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacienteId?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RangeCreateInput = {
    name: string
    minAge: number
    maxAge: number
    description?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    boards?: BoardCreateNestedManyWithoutRangeInput
  }

  export type RangeUncheckedCreateInput = {
    id?: number
    name: string
    minAge: number
    maxAge: number
    description?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    boards?: BoardUncheckedCreateNestedManyWithoutRangeInput
  }

  export type RangeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boards?: BoardUpdateManyWithoutRangeNestedInput
  }

  export type RangeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boards?: BoardUncheckedUpdateManyWithoutRangeNestedInput
  }

  export type RangeCreateManyInput = {
    id?: number
    name: string
    minAge: number
    maxAge: number
    description?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RangeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RangeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateInput = {
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    range: RangeCreateNestedOneWithoutBoardsInput
  }

  export type BoardUncheckedCreateInput = {
    id?: number
    rangeId: number
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    range?: RangeUpdateOneRequiredWithoutBoardsNestedInput
  }

  export type BoardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rangeId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateManyInput = {
    id?: number
    rangeId: number
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rangeId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BiophysicsTestListRelationFilter = {
    every?: BiophysicsTestWhereInput
    some?: BiophysicsTestWhereInput
    none?: BiophysicsTestWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BiophysicsTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    foto?: SortOrder
    nacionalidad?: SortOrder
    identificacion?: SortOrder
    fechaHistoria?: SortOrder
    apellidos?: SortOrder
    nombres?: SortOrder
    fechaNacimiento?: SortOrder
    edadCronologica?: SortOrder
    genero?: SortOrder
    lugarNacimiento?: SortOrder
    telefono?: SortOrder
    estadoCivil?: SortOrder
    profesion?: SortOrder
    paisResidencia?: SortOrder
    estadoResidencia?: SortOrder
    ciudad?: SortOrder
    direccion?: SortOrder
    observaciones?: SortOrder
    email?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    edadCronologica?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    foto?: SortOrder
    nacionalidad?: SortOrder
    identificacion?: SortOrder
    fechaHistoria?: SortOrder
    apellidos?: SortOrder
    nombres?: SortOrder
    fechaNacimiento?: SortOrder
    edadCronologica?: SortOrder
    genero?: SortOrder
    lugarNacimiento?: SortOrder
    telefono?: SortOrder
    estadoCivil?: SortOrder
    profesion?: SortOrder
    paisResidencia?: SortOrder
    estadoResidencia?: SortOrder
    ciudad?: SortOrder
    direccion?: SortOrder
    observaciones?: SortOrder
    email?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    foto?: SortOrder
    nacionalidad?: SortOrder
    identificacion?: SortOrder
    fechaHistoria?: SortOrder
    apellidos?: SortOrder
    nombres?: SortOrder
    fechaNacimiento?: SortOrder
    edadCronologica?: SortOrder
    genero?: SortOrder
    lugarNacimiento?: SortOrder
    telefono?: SortOrder
    estadoCivil?: SortOrder
    profesion?: SortOrder
    paisResidencia?: SortOrder
    estadoResidencia?: SortOrder
    ciudad?: SortOrder
    direccion?: SortOrder
    observaciones?: SortOrder
    email?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    edadCronologica?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type BiophysicsTestCountOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fecha?: SortOrder
    genero?: SortOrder
    grasa?: SortOrder
    grasaEdadCalculada?: SortOrder
    imc?: SortOrder
    imcEdadCalculada?: SortOrder
    reflejosMed1?: SortOrder
    reflejosMed2?: SortOrder
    reflejosMed3?: SortOrder
    reflejosPromedio?: SortOrder
    reflejosEdadCalculada?: SortOrder
    acomodacion?: SortOrder
    acomodacionEdadCalculada?: SortOrder
    balanceMed1?: SortOrder
    balanceMed2?: SortOrder
    balanceMed3?: SortOrder
    balancePromedio?: SortOrder
    balanceEdadCalculada?: SortOrder
    hidratacion?: SortOrder
    hidratacionEdadCalculada?: SortOrder
    sistolica?: SortOrder
    sistolicaEdadCalculada?: SortOrder
    diastolica?: SortOrder
    diastolicaEdadCalculada?: SortOrder
    pulsoReposo?: SortOrder
    pulsoReposoEdadCalculada?: SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrder
    edadDiferencial?: SortOrder
    evaluacion?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type BiophysicsTestAvgOrderByAggregateInput = {
    grasa?: SortOrder
    grasaEdadCalculada?: SortOrder
    imc?: SortOrder
    imcEdadCalculada?: SortOrder
    reflejosMed1?: SortOrder
    reflejosMed2?: SortOrder
    reflejosMed3?: SortOrder
    reflejosPromedio?: SortOrder
    reflejosEdadCalculada?: SortOrder
    acomodacion?: SortOrder
    acomodacionEdadCalculada?: SortOrder
    balanceMed1?: SortOrder
    balanceMed2?: SortOrder
    balanceMed3?: SortOrder
    balancePromedio?: SortOrder
    balanceEdadCalculada?: SortOrder
    hidratacion?: SortOrder
    hidratacionEdadCalculada?: SortOrder
    sistolica?: SortOrder
    sistolicaEdadCalculada?: SortOrder
    diastolica?: SortOrder
    diastolicaEdadCalculada?: SortOrder
    pulsoReposo?: SortOrder
    pulsoReposoEdadCalculada?: SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrder
    edadDiferencial?: SortOrder
  }

  export type BiophysicsTestMaxOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fecha?: SortOrder
    genero?: SortOrder
    grasa?: SortOrder
    grasaEdadCalculada?: SortOrder
    imc?: SortOrder
    imcEdadCalculada?: SortOrder
    reflejosMed1?: SortOrder
    reflejosMed2?: SortOrder
    reflejosMed3?: SortOrder
    reflejosPromedio?: SortOrder
    reflejosEdadCalculada?: SortOrder
    acomodacion?: SortOrder
    acomodacionEdadCalculada?: SortOrder
    balanceMed1?: SortOrder
    balanceMed2?: SortOrder
    balanceMed3?: SortOrder
    balancePromedio?: SortOrder
    balanceEdadCalculada?: SortOrder
    hidratacion?: SortOrder
    hidratacionEdadCalculada?: SortOrder
    sistolica?: SortOrder
    sistolicaEdadCalculada?: SortOrder
    diastolica?: SortOrder
    diastolicaEdadCalculada?: SortOrder
    pulsoReposo?: SortOrder
    pulsoReposoEdadCalculada?: SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrder
    edadDiferencial?: SortOrder
    evaluacion?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type BiophysicsTestMinOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fecha?: SortOrder
    genero?: SortOrder
    grasa?: SortOrder
    grasaEdadCalculada?: SortOrder
    imc?: SortOrder
    imcEdadCalculada?: SortOrder
    reflejosMed1?: SortOrder
    reflejosMed2?: SortOrder
    reflejosMed3?: SortOrder
    reflejosPromedio?: SortOrder
    reflejosEdadCalculada?: SortOrder
    acomodacion?: SortOrder
    acomodacionEdadCalculada?: SortOrder
    balanceMed1?: SortOrder
    balanceMed2?: SortOrder
    balanceMed3?: SortOrder
    balancePromedio?: SortOrder
    balanceEdadCalculada?: SortOrder
    hidratacion?: SortOrder
    hidratacionEdadCalculada?: SortOrder
    sistolica?: SortOrder
    sistolicaEdadCalculada?: SortOrder
    diastolica?: SortOrder
    diastolicaEdadCalculada?: SortOrder
    pulsoReposo?: SortOrder
    pulsoReposoEdadCalculada?: SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrder
    edadDiferencial?: SortOrder
    evaluacion?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type BiophysicsTestSumOrderByAggregateInput = {
    grasa?: SortOrder
    grasaEdadCalculada?: SortOrder
    imc?: SortOrder
    imcEdadCalculada?: SortOrder
    reflejosMed1?: SortOrder
    reflejosMed2?: SortOrder
    reflejosMed3?: SortOrder
    reflejosPromedio?: SortOrder
    reflejosEdadCalculada?: SortOrder
    acomodacion?: SortOrder
    acomodacionEdadCalculada?: SortOrder
    balanceMed1?: SortOrder
    balanceMed2?: SortOrder
    balanceMed3?: SortOrder
    balancePromedio?: SortOrder
    balanceEdadCalculada?: SortOrder
    hidratacion?: SortOrder
    hidratacionEdadCalculada?: SortOrder
    sistolica?: SortOrder
    sistolicaEdadCalculada?: SortOrder
    diastolica?: SortOrder
    diastolicaEdadCalculada?: SortOrder
    pulsoReposo?: SortOrder
    pulsoReposoEdadCalculada?: SortOrder
    edadCronologica?: SortOrder
    edadBiofisica?: SortOrder
    edadDiferencial?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoardListRelationFilter = {
    every?: BoardWhereInput
    some?: BoardWhereInput
    none?: BoardWhereInput
  }

  export type BoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RangeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RangeAvgOrderByAggregateInput = {
    id?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
  }

  export type RangeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RangeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    description?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RangeSumOrderByAggregateInput = {
    id?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RangeRelationFilter = {
    is?: RangeWhereInput
    isNot?: RangeWhereInput
  }

  export type BoardCountOrderByAggregateInput = {
    id?: SortOrder
    rangeId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    min?: SortOrder
    max?: SortOrder
    inverse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardAvgOrderByAggregateInput = {
    id?: SortOrder
    rangeId?: SortOrder
    min?: SortOrder
    max?: SortOrder
  }

  export type BoardMaxOrderByAggregateInput = {
    id?: SortOrder
    rangeId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    min?: SortOrder
    max?: SortOrder
    inverse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardMinOrderByAggregateInput = {
    id?: SortOrder
    rangeId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    min?: SortOrder
    max?: SortOrder
    inverse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardSumOrderByAggregateInput = {
    id?: SortOrder
    rangeId?: SortOrder
    min?: SortOrder
    max?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BiophysicsTestCreateNestedManyWithoutPacienteInput = {
    create?: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput> | BiophysicsTestCreateWithoutPacienteInput[] | BiophysicsTestUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: BiophysicsTestCreateOrConnectWithoutPacienteInput | BiophysicsTestCreateOrConnectWithoutPacienteInput[]
    createMany?: BiophysicsTestCreateManyPacienteInputEnvelope
    connect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
  }

  export type BiophysicsTestUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput> | BiophysicsTestCreateWithoutPacienteInput[] | BiophysicsTestUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: BiophysicsTestCreateOrConnectWithoutPacienteInput | BiophysicsTestCreateOrConnectWithoutPacienteInput[]
    createMany?: BiophysicsTestCreateManyPacienteInputEnvelope
    connect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BiophysicsTestUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput> | BiophysicsTestCreateWithoutPacienteInput[] | BiophysicsTestUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: BiophysicsTestCreateOrConnectWithoutPacienteInput | BiophysicsTestCreateOrConnectWithoutPacienteInput[]
    upsert?: BiophysicsTestUpsertWithWhereUniqueWithoutPacienteInput | BiophysicsTestUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: BiophysicsTestCreateManyPacienteInputEnvelope
    set?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    disconnect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    delete?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    connect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    update?: BiophysicsTestUpdateWithWhereUniqueWithoutPacienteInput | BiophysicsTestUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: BiophysicsTestUpdateManyWithWhereWithoutPacienteInput | BiophysicsTestUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: BiophysicsTestScalarWhereInput | BiophysicsTestScalarWhereInput[]
  }

  export type BiophysicsTestUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput> | BiophysicsTestCreateWithoutPacienteInput[] | BiophysicsTestUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: BiophysicsTestCreateOrConnectWithoutPacienteInput | BiophysicsTestCreateOrConnectWithoutPacienteInput[]
    upsert?: BiophysicsTestUpsertWithWhereUniqueWithoutPacienteInput | BiophysicsTestUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: BiophysicsTestCreateManyPacienteInputEnvelope
    set?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    disconnect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    delete?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    connect?: BiophysicsTestWhereUniqueInput | BiophysicsTestWhereUniqueInput[]
    update?: BiophysicsTestUpdateWithWhereUniqueWithoutPacienteInput | BiophysicsTestUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: BiophysicsTestUpdateManyWithWhereWithoutPacienteInput | BiophysicsTestUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: BiophysicsTestScalarWhereInput | BiophysicsTestScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutTestsBiofisicosInput = {
    create?: XOR<PatientCreateWithoutTestsBiofisicosInput, PatientUncheckedCreateWithoutTestsBiofisicosInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTestsBiofisicosInput
    connect?: PatientWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUpdateOneRequiredWithoutTestsBiofisicosNestedInput = {
    create?: XOR<PatientCreateWithoutTestsBiofisicosInput, PatientUncheckedCreateWithoutTestsBiofisicosInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTestsBiofisicosInput
    upsert?: PatientUpsertWithoutTestsBiofisicosInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTestsBiofisicosInput, PatientUpdateWithoutTestsBiofisicosInput>, PatientUncheckedUpdateWithoutTestsBiofisicosInput>
  }

  export type BoardCreateNestedManyWithoutRangeInput = {
    create?: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput> | BoardCreateWithoutRangeInput[] | BoardUncheckedCreateWithoutRangeInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRangeInput | BoardCreateOrConnectWithoutRangeInput[]
    createMany?: BoardCreateManyRangeInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoardUncheckedCreateNestedManyWithoutRangeInput = {
    create?: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput> | BoardCreateWithoutRangeInput[] | BoardUncheckedCreateWithoutRangeInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRangeInput | BoardCreateOrConnectWithoutRangeInput[]
    createMany?: BoardCreateManyRangeInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BoardUpdateManyWithoutRangeNestedInput = {
    create?: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput> | BoardCreateWithoutRangeInput[] | BoardUncheckedCreateWithoutRangeInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRangeInput | BoardCreateOrConnectWithoutRangeInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutRangeInput | BoardUpsertWithWhereUniqueWithoutRangeInput[]
    createMany?: BoardCreateManyRangeInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutRangeInput | BoardUpdateWithWhereUniqueWithoutRangeInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutRangeInput | BoardUpdateManyWithWhereWithoutRangeInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type BoardUncheckedUpdateManyWithoutRangeNestedInput = {
    create?: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput> | BoardCreateWithoutRangeInput[] | BoardUncheckedCreateWithoutRangeInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRangeInput | BoardCreateOrConnectWithoutRangeInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutRangeInput | BoardUpsertWithWhereUniqueWithoutRangeInput[]
    createMany?: BoardCreateManyRangeInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutRangeInput | BoardUpdateWithWhereUniqueWithoutRangeInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutRangeInput | BoardUpdateManyWithWhereWithoutRangeInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type RangeCreateNestedOneWithoutBoardsInput = {
    create?: XOR<RangeCreateWithoutBoardsInput, RangeUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: RangeCreateOrConnectWithoutBoardsInput
    connect?: RangeWhereUniqueInput
  }

  export type RangeUpdateOneRequiredWithoutBoardsNestedInput = {
    create?: XOR<RangeCreateWithoutBoardsInput, RangeUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: RangeCreateOrConnectWithoutBoardsInput
    upsert?: RangeUpsertWithoutBoardsInput
    connect?: RangeWhereUniqueInput
    update?: XOR<XOR<RangeUpdateToOneWithWhereWithoutBoardsInput, RangeUpdateWithoutBoardsInput>, RangeUncheckedUpdateWithoutBoardsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BiophysicsTestCreateWithoutPacienteInput = {
    id?: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type BiophysicsTestUncheckedCreateWithoutPacienteInput = {
    id?: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type BiophysicsTestCreateOrConnectWithoutPacienteInput = {
    where: BiophysicsTestWhereUniqueInput
    create: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput>
  }

  export type BiophysicsTestCreateManyPacienteInputEnvelope = {
    data: BiophysicsTestCreateManyPacienteInput | BiophysicsTestCreateManyPacienteInput[]
  }

  export type BiophysicsTestUpsertWithWhereUniqueWithoutPacienteInput = {
    where: BiophysicsTestWhereUniqueInput
    update: XOR<BiophysicsTestUpdateWithoutPacienteInput, BiophysicsTestUncheckedUpdateWithoutPacienteInput>
    create: XOR<BiophysicsTestCreateWithoutPacienteInput, BiophysicsTestUncheckedCreateWithoutPacienteInput>
  }

  export type BiophysicsTestUpdateWithWhereUniqueWithoutPacienteInput = {
    where: BiophysicsTestWhereUniqueInput
    data: XOR<BiophysicsTestUpdateWithoutPacienteInput, BiophysicsTestUncheckedUpdateWithoutPacienteInput>
  }

  export type BiophysicsTestUpdateManyWithWhereWithoutPacienteInput = {
    where: BiophysicsTestScalarWhereInput
    data: XOR<BiophysicsTestUpdateManyMutationInput, BiophysicsTestUncheckedUpdateManyWithoutPacienteInput>
  }

  export type BiophysicsTestScalarWhereInput = {
    AND?: BiophysicsTestScalarWhereInput | BiophysicsTestScalarWhereInput[]
    OR?: BiophysicsTestScalarWhereInput[]
    NOT?: BiophysicsTestScalarWhereInput | BiophysicsTestScalarWhereInput[]
    id?: StringFilter<"BiophysicsTest"> | string
    pacienteId?: StringFilter<"BiophysicsTest"> | string
    fecha?: DateTimeFilter<"BiophysicsTest"> | Date | string
    genero?: StringFilter<"BiophysicsTest"> | string
    grasa?: FloatNullableFilter<"BiophysicsTest"> | number | null
    grasaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imc?: FloatNullableFilter<"BiophysicsTest"> | number | null
    imcEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosPromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    reflejosEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    acomodacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed1?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed2?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceMed3?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balancePromedio?: FloatNullableFilter<"BiophysicsTest"> | number | null
    balanceEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacion?: FloatNullableFilter<"BiophysicsTest"> | number | null
    hidratacionEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    sistolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    diastolicaEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposo?: FloatNullableFilter<"BiophysicsTest"> | number | null
    pulsoReposoEdadCalculada?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadCronologica?: FloatFilter<"BiophysicsTest"> | number
    edadBiofisica?: FloatNullableFilter<"BiophysicsTest"> | number | null
    edadDiferencial?: FloatNullableFilter<"BiophysicsTest"> | number | null
    evaluacion?: StringNullableFilter<"BiophysicsTest"> | string | null
    fechaCreacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
    fechaActualizacion?: DateTimeFilter<"BiophysicsTest"> | Date | string
  }

  export type PatientCreateWithoutTestsBiofisicosInput = {
    id?: string
    foto?: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria?: Date | string
    apellidos: string
    nombres: string
    fechaNacimiento: Date | string
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono?: string | null
    estadoCivil?: string | null
    profesion?: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion?: string | null
    observaciones?: string | null
    email?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PatientUncheckedCreateWithoutTestsBiofisicosInput = {
    id?: string
    foto?: string | null
    nacionalidad: string
    identificacion: string
    fechaHistoria?: Date | string
    apellidos: string
    nombres: string
    fechaNacimiento: Date | string
    edadCronologica: number
    genero: string
    lugarNacimiento: string
    telefono?: string | null
    estadoCivil?: string | null
    profesion?: string | null
    paisResidencia: string
    estadoResidencia: string
    ciudad: string
    direccion?: string | null
    observaciones?: string | null
    email?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PatientCreateOrConnectWithoutTestsBiofisicosInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTestsBiofisicosInput, PatientUncheckedCreateWithoutTestsBiofisicosInput>
  }

  export type PatientUpsertWithoutTestsBiofisicosInput = {
    update: XOR<PatientUpdateWithoutTestsBiofisicosInput, PatientUncheckedUpdateWithoutTestsBiofisicosInput>
    create: XOR<PatientCreateWithoutTestsBiofisicosInput, PatientUncheckedCreateWithoutTestsBiofisicosInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTestsBiofisicosInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTestsBiofisicosInput, PatientUncheckedUpdateWithoutTestsBiofisicosInput>
  }

  export type PatientUpdateWithoutTestsBiofisicosInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateWithoutTestsBiofisicosInput = {
    id?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    nacionalidad?: StringFieldUpdateOperationsInput | string
    identificacion?: StringFieldUpdateOperationsInput | string
    fechaHistoria?: DateTimeFieldUpdateOperationsInput | Date | string
    apellidos?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    edadCronologica?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    lugarNacimiento?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    profesion?: NullableStringFieldUpdateOperationsInput | string | null
    paisResidencia?: StringFieldUpdateOperationsInput | string
    estadoResidencia?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateWithoutRangeInput = {
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardUncheckedCreateWithoutRangeInput = {
    id?: number
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCreateOrConnectWithoutRangeInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput>
  }

  export type BoardCreateManyRangeInputEnvelope = {
    data: BoardCreateManyRangeInput | BoardCreateManyRangeInput[]
  }

  export type BoardUpsertWithWhereUniqueWithoutRangeInput = {
    where: BoardWhereUniqueInput
    update: XOR<BoardUpdateWithoutRangeInput, BoardUncheckedUpdateWithoutRangeInput>
    create: XOR<BoardCreateWithoutRangeInput, BoardUncheckedCreateWithoutRangeInput>
  }

  export type BoardUpdateWithWhereUniqueWithoutRangeInput = {
    where: BoardWhereUniqueInput
    data: XOR<BoardUpdateWithoutRangeInput, BoardUncheckedUpdateWithoutRangeInput>
  }

  export type BoardUpdateManyWithWhereWithoutRangeInput = {
    where: BoardScalarWhereInput
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyWithoutRangeInput>
  }

  export type BoardScalarWhereInput = {
    AND?: BoardScalarWhereInput | BoardScalarWhereInput[]
    OR?: BoardScalarWhereInput[]
    NOT?: BoardScalarWhereInput | BoardScalarWhereInput[]
    id?: IntFilter<"Board"> | number
    rangeId?: IntFilter<"Board"> | number
    type?: StringFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    min?: FloatFilter<"Board"> | number
    max?: FloatFilter<"Board"> | number
    inverse?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
  }

  export type RangeCreateWithoutBoardsInput = {
    name: string
    minAge: number
    maxAge: number
    description?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RangeUncheckedCreateWithoutBoardsInput = {
    id?: number
    name: string
    minAge: number
    maxAge: number
    description?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RangeCreateOrConnectWithoutBoardsInput = {
    where: RangeWhereUniqueInput
    create: XOR<RangeCreateWithoutBoardsInput, RangeUncheckedCreateWithoutBoardsInput>
  }

  export type RangeUpsertWithoutBoardsInput = {
    update: XOR<RangeUpdateWithoutBoardsInput, RangeUncheckedUpdateWithoutBoardsInput>
    create: XOR<RangeCreateWithoutBoardsInput, RangeUncheckedCreateWithoutBoardsInput>
    where?: RangeWhereInput
  }

  export type RangeUpdateToOneWithWhereWithoutBoardsInput = {
    where?: RangeWhereInput
    data: XOR<RangeUpdateWithoutBoardsInput, RangeUncheckedUpdateWithoutBoardsInput>
  }

  export type RangeUpdateWithoutBoardsInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RangeUncheckedUpdateWithoutBoardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestCreateManyPacienteInput = {
    id?: string
    fecha?: Date | string
    genero: string
    grasa?: number | null
    grasaEdadCalculada?: number | null
    imc?: number | null
    imcEdadCalculada?: number | null
    reflejosMed1?: number | null
    reflejosMed2?: number | null
    reflejosMed3?: number | null
    reflejosPromedio?: number | null
    reflejosEdadCalculada?: number | null
    acomodacion?: number | null
    acomodacionEdadCalculada?: number | null
    balanceMed1?: number | null
    balanceMed2?: number | null
    balanceMed3?: number | null
    balancePromedio?: number | null
    balanceEdadCalculada?: number | null
    hidratacion?: number | null
    hidratacionEdadCalculada?: number | null
    sistolica?: number | null
    sistolicaEdadCalculada?: number | null
    diastolica?: number | null
    diastolicaEdadCalculada?: number | null
    pulsoReposo?: number | null
    pulsoReposoEdadCalculada?: number | null
    edadCronologica: number
    edadBiofisica?: number | null
    edadDiferencial?: number | null
    evaluacion?: string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type BiophysicsTestUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiophysicsTestUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    grasa?: NullableFloatFieldUpdateOperationsInput | number | null
    grasaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    imc?: NullableFloatFieldUpdateOperationsInput | number | null
    imcEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosPromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    reflejosEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacion?: NullableFloatFieldUpdateOperationsInput | number | null
    acomodacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed1?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed2?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceMed3?: NullableFloatFieldUpdateOperationsInput | number | null
    balancePromedio?: NullableFloatFieldUpdateOperationsInput | number | null
    balanceEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacion?: NullableFloatFieldUpdateOperationsInput | number | null
    hidratacionEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolica?: NullableFloatFieldUpdateOperationsInput | number | null
    sistolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolica?: NullableFloatFieldUpdateOperationsInput | number | null
    diastolicaEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposo?: NullableFloatFieldUpdateOperationsInput | number | null
    pulsoReposoEdadCalculada?: NullableFloatFieldUpdateOperationsInput | number | null
    edadCronologica?: FloatFieldUpdateOperationsInput | number
    edadBiofisica?: NullableFloatFieldUpdateOperationsInput | number | null
    edadDiferencial?: NullableFloatFieldUpdateOperationsInput | number | null
    evaluacion?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateManyRangeInput = {
    id?: number
    type: string
    name: string
    min: number
    max: number
    inverse?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardUpdateWithoutRangeInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUncheckedUpdateWithoutRangeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUncheckedUpdateManyWithoutRangeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    min?: FloatFieldUpdateOperationsInput | number
    max?: FloatFieldUpdateOperationsInput | number
    inverse?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RangeCountOutputTypeDefaultArgs instead
     */
    export type RangeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RangeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BiophysicsTestDefaultArgs instead
     */
    export type BiophysicsTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BiophysicsTestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RangeDefaultArgs instead
     */
    export type RangeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RangeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardDefaultArgs instead
     */
    export type BoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}